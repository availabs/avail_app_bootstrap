type AadtShp {
  ogcFid: Int!
  objectid1: Int
  objectid: Int
  rcId: String
  locError: String
  shapeLeng: Float
  tdvRoute: String
  ccId: String
  roadwaytyp: String
  begindesc: String
  enddesc: String
  muni: String
  aadt: Float
  aadtType: String
  aadtYear: Float
  volTxt: String
  classTxt: String
  speedTxt: String
  dataType: String
  volTdv: String
  classTdv: String
  speedTdv: String
  shapeLe1: Float
  wkbGeometry: String
}

# A condition to be used against `AadtShp` object types. All fields are tested for equality and combined with a logical ‘and.’
input AadtShpCondition {
  # Checks for equality with the object’s `ogcFid` field.
  ogcFid: Int

  # Checks for equality with the object’s `objectid1` field.
  objectid1: Int

  # Checks for equality with the object’s `objectid` field.
  objectid: Int

  # Checks for equality with the object’s `rcId` field.
  rcId: String

  # Checks for equality with the object’s `locError` field.
  locError: String

  # Checks for equality with the object’s `shapeLeng` field.
  shapeLeng: Float

  # Checks for equality with the object’s `tdvRoute` field.
  tdvRoute: String

  # Checks for equality with the object’s `ccId` field.
  ccId: String

  # Checks for equality with the object’s `roadwaytyp` field.
  roadwaytyp: String

  # Checks for equality with the object’s `begindesc` field.
  begindesc: String

  # Checks for equality with the object’s `enddesc` field.
  enddesc: String

  # Checks for equality with the object’s `muni` field.
  muni: String

  # Checks for equality with the object’s `aadt` field.
  aadt: Float

  # Checks for equality with the object’s `aadtType` field.
  aadtType: String

  # Checks for equality with the object’s `aadtYear` field.
  aadtYear: Float

  # Checks for equality with the object’s `volTxt` field.
  volTxt: String

  # Checks for equality with the object’s `classTxt` field.
  classTxt: String

  # Checks for equality with the object’s `speedTxt` field.
  speedTxt: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `volTdv` field.
  volTdv: String

  # Checks for equality with the object’s `classTdv` field.
  classTdv: String

  # Checks for equality with the object’s `speedTdv` field.
  speedTdv: String

  # Checks for equality with the object’s `shapeLe1` field.
  shapeLe1: Float

  # Checks for equality with the object’s `wkbGeometry` field.
  wkbGeometry: String
}

# A connection to a list of `AadtShp` values.
type AadtShpsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `AadtShp` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `AadtShp` and cursor to aid in pagination.
  edges: [AadtShpsEdge]

  # A list of `AadtShp` objects.
  nodes: [AadtShp!]
}

# A `AadtShp` edge in the connection.
type AadtShpsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `AadtShp` at the end of the edge.
  node: AadtShp!
}

# Methods to use when ordering `AadtShp`.
enum AadtShpsOrderBy {
  NATURAL
  OGC_FID_ASC
  OGC_FID_DESC
  OBJECTID_1_ASC
  OBJECTID_1_DESC
  OBJECTID_ASC
  OBJECTID_DESC
  RC_ID_ASC
  RC_ID_DESC
  LOC_ERROR_ASC
  LOC_ERROR_DESC
  SHAPE_LENG_ASC
  SHAPE_LENG_DESC
  TDV_ROUTE_ASC
  TDV_ROUTE_DESC
  CC_ID_ASC
  CC_ID_DESC
  ROADWAYTYP_ASC
  ROADWAYTYP_DESC
  BEGINDESC_ASC
  BEGINDESC_DESC
  ENDDESC_ASC
  ENDDESC_DESC
  MUNI_ASC
  MUNI_DESC
  AADT_ASC
  AADT_DESC
  AADT_TYPE_ASC
  AADT_TYPE_DESC
  AADT_YEAR_ASC
  AADT_YEAR_DESC
  VOL_TXT_ASC
  VOL_TXT_DESC
  CLASS_TXT_ASC
  CLASS_TXT_DESC
  SPEED_TXT_ASC
  SPEED_TXT_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  VOL_TDV_ASC
  VOL_TDV_DESC
  CLASS_TDV_ASC
  CLASS_TDV_DESC
  SPEED_TDV_ASC
  SPEED_TDV_DESC
  SHAPE_LE_1_ASC
  SHAPE_LE_1_DESC
  WKB_GEOMETRY_ASC
  WKB_GEOMETRY_DESC
}

# Short count average weekday speed distribution by direction for a given Region
# and Year. Weekday data is defined as Monday 6am through Friday Noon.
type AverageWeekdaySpeed {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: String

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: String

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: String

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # A description of the data type contained in the file.
  dataType: String

  # Speed_Limit for the count location in speed data files.
  speedLimit: Int

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # The first day of data collection for the count.
  dayOfFirstData: DayOfMonth

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # Indicates if the record represents the total roadway, or just a single
  # direction. ‘blank’ indicates data applies to direction in Federal Direction
  # field. ‘Y’ indicates data applies to the entire roadway.
  fullCount: String

  # The number of vehicles in the NYSDOT Speed Bin 1 (00-20.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin1: Int

  # The number of vehicles in the NYSDOT Speed Bin 2 (20.1-25.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin2: Int

  # The number of vehicles in the NYSDOT Speed Bin 3 (25.1-30.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin3: Int

  # The number of vehicles in the NYSDOT Speed Bin 4 (30.1-35.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin4: Int

  # The number of vehicles in the NYSDOT Speed Bin 5 (35.1-40.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin5: Int

  # The number of vehicles in the NYSDOT Speed Bin 6 (40.1-45.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin6: Int

  # The number of vehicles in the NYSDOT Speed Bin 7 (45.1-50.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin7: Int

  # The number of vehicles in the NYSDOT Speed Bin 8 (50.1-55.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin8: Int

  # The number of vehicles in the NYSDOT Speed Bin 9 (55.1-60.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin9: Int

  # The number of vehicles in the NYSDOT Speed Bin 10 (60.1-65.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin10: Int

  # The number of vehicles in the NYSDOT Speed Bin 11 (65.1-70.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin11: Int

  # The number of vehicles in the NYSDOT Speed Bin 12 (70.1-75.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin12: Int

  # The number of vehicles in the NYSDOT Speed Bin 13 (75.1-80.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin13: Int

  # The number of vehicles in the NYSDOT Speed Bin 14 (80.1-85.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin14: Int

  # The number of vehicles in the NYSDOT Speed Bin 15 (>85.0 mph) as a daily total for the Average Weekday.
  avgWkdayBin15: Int

  # Currently blank. Represents the number of unclassified vehicles as a daily total for the Average Weekday.
  avgWkdayUnclassified: Int

  # Represents the number of vehicles in all classes as a daily total for the Average Weekday.
  avgWkdayTotals: Int

  # Represents the Average Speed of vehicles for the Average Weekday.
  avgSpeed: Float

  # Represents the speed of the vehicle in the 50th percentile, or median speed, for the Average Weekday.
  fiftythPercentileSpeed: Float

  # Represents the speed of the vehicle in the 85th percentile for the Average Weekday.
  eightyfivethPercentileSpeed: Float

  # Represents the percentage of total vehicles that are exceeding 55mph for the Average Weekday.
  percentileExceeding55: Float

  # Represents the percentage of total vehicles that are exceeding 65mph for the Average Weekday.
  percentileExceeding65: Float

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `AverageWeekdaySpeed`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is related to this `AverageWeekdaySpeed`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `CalendarMonthName` that is related to this `AverageWeekdaySpeed`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `AverageWeekdaySpeed`.
  dayOfMonthOrdinalByDayOfFirstData: DayOfMonthOrdinal

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `AverageWeekdaySpeed`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription
}

# A condition to be used against `AverageWeekdaySpeed` object types. All fields
# are tested for equality and combined with a logical ‘and.’
input AverageWeekdaySpeedCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: String

  # Checks for equality with the object’s `regionCode` field.
  regionCode: String

  # Checks for equality with the object’s `countyCode` field.
  countyCode: String

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `speedLimit` field.
  speedLimit: Int

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `dayOfFirstData` field.
  dayOfFirstData: DayOfMonth

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `fullCount` field.
  fullCount: String

  # Checks for equality with the object’s `avgWkdayBin1` field.
  avgWkdayBin1: Int

  # Checks for equality with the object’s `avgWkdayBin2` field.
  avgWkdayBin2: Int

  # Checks for equality with the object’s `avgWkdayBin3` field.
  avgWkdayBin3: Int

  # Checks for equality with the object’s `avgWkdayBin4` field.
  avgWkdayBin4: Int

  # Checks for equality with the object’s `avgWkdayBin5` field.
  avgWkdayBin5: Int

  # Checks for equality with the object’s `avgWkdayBin6` field.
  avgWkdayBin6: Int

  # Checks for equality with the object’s `avgWkdayBin7` field.
  avgWkdayBin7: Int

  # Checks for equality with the object’s `avgWkdayBin8` field.
  avgWkdayBin8: Int

  # Checks for equality with the object’s `avgWkdayBin9` field.
  avgWkdayBin9: Int

  # Checks for equality with the object’s `avgWkdayBin10` field.
  avgWkdayBin10: Int

  # Checks for equality with the object’s `avgWkdayBin11` field.
  avgWkdayBin11: Int

  # Checks for equality with the object’s `avgWkdayBin12` field.
  avgWkdayBin12: Int

  # Checks for equality with the object’s `avgWkdayBin13` field.
  avgWkdayBin13: Int

  # Checks for equality with the object’s `avgWkdayBin14` field.
  avgWkdayBin14: Int

  # Checks for equality with the object’s `avgWkdayBin15` field.
  avgWkdayBin15: Int

  # Checks for equality with the object’s `avgWkdayUnclassified` field.
  avgWkdayUnclassified: Int

  # Checks for equality with the object’s `avgWkdayTotals` field.
  avgWkdayTotals: Int

  # Checks for equality with the object’s `avgSpeed` field.
  avgSpeed: Float

  # Checks for equality with the object’s `fiftythPercentileSpeed` field.
  fiftythPercentileSpeed: Float

  # Checks for equality with the object’s `eightyfivethPercentileSpeed` field.
  eightyfivethPercentileSpeed: Float

  # Checks for equality with the object’s `percentileExceeding55` field.
  percentileExceeding55: Float

  # Checks for equality with the object’s `percentileExceeding65` field.
  percentileExceeding65: Float

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `AverageWeekdaySpeed` values.
type AverageWeekdaySpeedsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `AverageWeekdaySpeed` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `AverageWeekdaySpeed` and cursor to aid in pagination.
  edges: [AverageWeekdaySpeedsEdge]

  # A list of `AverageWeekdaySpeed` objects.
  nodes: [AverageWeekdaySpeed!]
}

# A `AverageWeekdaySpeed` edge in the connection.
type AverageWeekdaySpeedsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `AverageWeekdaySpeed` at the end of the edge.
  node: AverageWeekdaySpeed!
}

# Methods to use when ordering `AverageWeekdaySpeed`.
enum AverageWeekdaySpeedsOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  SPEED_LIMIT_ASC
  SPEED_LIMIT_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_OF_FIRST_DATA_ASC
  DAY_OF_FIRST_DATA_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  FULL_COUNT_ASC
  FULL_COUNT_DESC
  AVG_WKDAY_BIN_1_ASC
  AVG_WKDAY_BIN_1_DESC
  AVG_WKDAY_BIN_2_ASC
  AVG_WKDAY_BIN_2_DESC
  AVG_WKDAY_BIN_3_ASC
  AVG_WKDAY_BIN_3_DESC
  AVG_WKDAY_BIN_4_ASC
  AVG_WKDAY_BIN_4_DESC
  AVG_WKDAY_BIN_5_ASC
  AVG_WKDAY_BIN_5_DESC
  AVG_WKDAY_BIN_6_ASC
  AVG_WKDAY_BIN_6_DESC
  AVG_WKDAY_BIN_7_ASC
  AVG_WKDAY_BIN_7_DESC
  AVG_WKDAY_BIN_8_ASC
  AVG_WKDAY_BIN_8_DESC
  AVG_WKDAY_BIN_9_ASC
  AVG_WKDAY_BIN_9_DESC
  AVG_WKDAY_BIN_10_ASC
  AVG_WKDAY_BIN_10_DESC
  AVG_WKDAY_BIN_11_ASC
  AVG_WKDAY_BIN_11_DESC
  AVG_WKDAY_BIN_12_ASC
  AVG_WKDAY_BIN_12_DESC
  AVG_WKDAY_BIN_13_ASC
  AVG_WKDAY_BIN_13_DESC
  AVG_WKDAY_BIN_14_ASC
  AVG_WKDAY_BIN_14_DESC
  AVG_WKDAY_BIN_15_ASC
  AVG_WKDAY_BIN_15_DESC
  AVG_WKDAY_UNCLASSIFIED_ASC
  AVG_WKDAY_UNCLASSIFIED_DESC
  AVG_WKDAY_TOTALS_ASC
  AVG_WKDAY_TOTALS_DESC
  AVG_SPEED_ASC
  AVG_SPEED_DESC
  FIFTYTH_PERCENTILE_SPEED_ASC
  FIFTYTH_PERCENTILE_SPEED_DESC
  EIGHTYFIVETH_PERCENTILE_SPEED_ASC
  EIGHTYFIVETH_PERCENTILE_SPEED_DESC
  PERCENTILE_EXCEEDING_55_ASC
  PERCENTILE_EXCEEDING_55_DESC
  PERCENTILE_EXCEEDING_65_ASC
  PERCENTILE_EXCEEDING_65_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}

# Short count average weekday class distribution by direction for a given Region
# and Year. Weekday data is defined as Monday 6am through Friday Noon.
type AverageWeekdayVehicleClassification {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: String

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: String

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: String

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # A description of the data type contained in the file.
  dataType: String

  # Blank in Classification data files.
  blank: String

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # The first day of data collection for the count.
  dayOfFirstData: DayOfMonth

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # Indicates if the record represents the total roadway, or just a single
  # direction. ‘blank’ indicates data applies to direction in Federal Direction
  # field. ‘Y’ indicates data applies to the entire roadway.
  fullCount: String

  # The number of vehicles in the FHWA F‐scheme class F1 (Motorcycles) as a daily total for the Average Weekday.
  avgWkdayF1s: Int

  # The number of vehicles in the FHWA F‐scheme class F2 (Autos) as a daily total for the Average Weekday.
  avgWkdayF2s: Int

  # The number of vehicles in the FHWA F‐scheme class F3 (2 axle, 4‐tire pickups,
  # vans, motor‐homes) as a daily total for the Average Weekday.
  avgWkdayF3s: Int

  # The number of vehicles in the FHWA F‐scheme class F4 (Buses) as a daily total for the Average Weekday.
  avgWkdayF4s: Int

  # The number of vehicles in the FHWA F‐scheme class F5 (2 axle, 6‐tire single
  # unit trucks) as a daily total for the Average Weekday.
  avgWkdayF5s: Int

  # The number of vehicles in the FHWA F‐scheme class F6 (3 axle single unit trucks) as a daily total for the Average Weekday.
  avgWkdayF6s: Int

  # The number of vehicles in the FHWA F‐scheme class F7 (4 or more axle single
  # unit trucks) as a daily total for the Average Weekday.
  avgWkdayF7s: Int

  # The number of vehicles in the FHWA F‐scheme class F8 (4 or less axle vehicles,
  # single trailer) as a daily total for the Average Weekday.
  avgWkdayF8s: Int

  # The number of vehicles in the FHWA F‐scheme class F9 (5 axle, single trailer) as a daily total for the Average Weekday.
  avgWkdayF9s: Int

  # The number of vehicles in the FHWA F‐scheme class F10 (6 or more axle, single
  # trailer) as a daily total for the Average Weekday.
  avgWkdayF10s: Int

  # The number of vehicles in the FHWA F‐scheme class F11 (5 axle multi‐trailer
  # trucks) as a daily total for the Average Weekday.
  avgWkdayF11s: Int

  # The number of vehicles in the FHWA F‐scheme class F12 (6 axle multi‐trailer
  # trucks) as a daily total for the Average Weekday.
  avgWkdayF12s: Int

  # The number of vehicles in the FHWA F‐scheme class F13 (7 or more axle
  # multi‐trailer trucks) as a daily total for the Average Weekday.
  avgWkdayF13s: Int

  # Currently blank. Represents the number of unclassified vehicles as a daily total for the Average Weekday.
  avgWkdayUnclassified: Int

  # Represents the number of vehicles in all classes as a daily total for the Average Weekday.
  avgWkdayTotals: Int

  # Represents the percentage of vehicles in classes F3‐F13 for the Average Weekday.
  avgWkdayPercF313: Float

  # Represents the percentage of vehicles in classes F4‐F13, or Heavy Vehicles, for the Average Weekday.
  avgWkdayPercF413: Float

  # Represents the percentage of vehicles in classes F4‐F7, or Single Unit Vehicles, for the Average Weekday.
  avgWkdayPercF47: Float

  # Represents the percentage of vehicles in classes F8‐F13, or Combination Vehicles, for the Average Weekday.
  avgWkdayPercF813: Float

  # Represents the percentage of vehicles in class F1, or Motorcycles, for the Average Weekday.
  avgWkdayPercF1: Float

  # Represents the percentage of vehicles in class F2, or Passenger Vehicles, for the Average Weekday.
  avgWkdayPercF2: Float

  # Represents the percentage of vehicles in class F3, or Light Trucks, for the Average Weekday.
  avgWkdayPercF3: Float

  # Represents the percentage of vehicles in class F4, or Busses, for the Average Weekday.
  avgWkdayPercF4: Float

  # Represents the percentage of vehicles in classes F5‐F7, or Single Unit Trucks, for the Average Weekday.
  avgWkdayPercF57: Float

  # Represents the axle correction factor for the count based on the Average Weekday class distribution.
  axleCorrectionFactor: Float

  # Represents the number of vehicles in classes F4‐F7 during the peak hour of the
  # count, expressed as a percentage of the total daily count.
  suPeak: Float

  # Represents the number of vehicles in classes F8‐F13 during the peak hour of
  # the count, expressed as a percentage of the total count.
  cuPeak: Float

  # Currently Blank. The number of Single Unit Vehicles, classes F4‐F7, during an Average Day.
  suAadt: Int

  # Currently Blank. The number of Combination Vehicles, classes F8‐F13, during an Average Day.
  cuAadt: Int

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related
  # to this `AverageWeekdayVehicleClassification`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is
  # related to this `AverageWeekdayVehicleClassification`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `CalendarMonthName` that is related to this `AverageWeekdayVehicleClassification`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `AverageWeekdayVehicleClassification`.
  dayOfMonthOrdinalByDayOfFirstData: DayOfMonthOrdinal

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `AverageWeekdayVehicleClassification`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription
}

# A condition to be used against `AverageWeekdayVehicleClassification` object
# types. All fields are tested for equality and combined with a logical ‘and.’
input AverageWeekdayVehicleClassificationCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: String

  # Checks for equality with the object’s `regionCode` field.
  regionCode: String

  # Checks for equality with the object’s `countyCode` field.
  countyCode: String

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `blank` field.
  blank: String

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `dayOfFirstData` field.
  dayOfFirstData: DayOfMonth

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `fullCount` field.
  fullCount: String

  # Checks for equality with the object’s `avgWkdayF1s` field.
  avgWkdayF1s: Int

  # Checks for equality with the object’s `avgWkdayF2s` field.
  avgWkdayF2s: Int

  # Checks for equality with the object’s `avgWkdayF3s` field.
  avgWkdayF3s: Int

  # Checks for equality with the object’s `avgWkdayF4s` field.
  avgWkdayF4s: Int

  # Checks for equality with the object’s `avgWkdayF5s` field.
  avgWkdayF5s: Int

  # Checks for equality with the object’s `avgWkdayF6s` field.
  avgWkdayF6s: Int

  # Checks for equality with the object’s `avgWkdayF7s` field.
  avgWkdayF7s: Int

  # Checks for equality with the object’s `avgWkdayF8s` field.
  avgWkdayF8s: Int

  # Checks for equality with the object’s `avgWkdayF9s` field.
  avgWkdayF9s: Int

  # Checks for equality with the object’s `avgWkdayF10s` field.
  avgWkdayF10s: Int

  # Checks for equality with the object’s `avgWkdayF11s` field.
  avgWkdayF11s: Int

  # Checks for equality with the object’s `avgWkdayF12s` field.
  avgWkdayF12s: Int

  # Checks for equality with the object’s `avgWkdayF13s` field.
  avgWkdayF13s: Int

  # Checks for equality with the object’s `avgWkdayUnclassified` field.
  avgWkdayUnclassified: Int

  # Checks for equality with the object’s `avgWkdayTotals` field.
  avgWkdayTotals: Int

  # Checks for equality with the object’s `avgWkdayPercF313` field.
  avgWkdayPercF313: Float

  # Checks for equality with the object’s `avgWkdayPercF413` field.
  avgWkdayPercF413: Float

  # Checks for equality with the object’s `avgWkdayPercF47` field.
  avgWkdayPercF47: Float

  # Checks for equality with the object’s `avgWkdayPercF813` field.
  avgWkdayPercF813: Float

  # Checks for equality with the object’s `avgWkdayPercF1` field.
  avgWkdayPercF1: Float

  # Checks for equality with the object’s `avgWkdayPercF2` field.
  avgWkdayPercF2: Float

  # Checks for equality with the object’s `avgWkdayPercF3` field.
  avgWkdayPercF3: Float

  # Checks for equality with the object’s `avgWkdayPercF4` field.
  avgWkdayPercF4: Float

  # Checks for equality with the object’s `avgWkdayPercF57` field.
  avgWkdayPercF57: Float

  # Checks for equality with the object’s `axleCorrectionFactor` field.
  axleCorrectionFactor: Float

  # Checks for equality with the object’s `suPeak` field.
  suPeak: Float

  # Checks for equality with the object’s `cuPeak` field.
  cuPeak: Float

  # Checks for equality with the object’s `suAadt` field.
  suAadt: Int

  # Checks for equality with the object’s `cuAadt` field.
  cuAadt: Int

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `AverageWeekdayVehicleClassification` values.
type AverageWeekdayVehicleClassificationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `AverageWeekdayVehicleClassification` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `AverageWeekdayVehicleClassification` and cursor to aid in pagination.
  edges: [AverageWeekdayVehicleClassificationsEdge]

  # A list of `AverageWeekdayVehicleClassification` objects.
  nodes: [AverageWeekdayVehicleClassification!]
}

# A `AverageWeekdayVehicleClassification` edge in the connection.
type AverageWeekdayVehicleClassificationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `AverageWeekdayVehicleClassification` at the end of the edge.
  node: AverageWeekdayVehicleClassification!
}

# Methods to use when ordering `AverageWeekdayVehicleClassification`.
enum AverageWeekdayVehicleClassificationsOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  BLANK_ASC
  BLANK_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_OF_FIRST_DATA_ASC
  DAY_OF_FIRST_DATA_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  FULL_COUNT_ASC
  FULL_COUNT_DESC
  AVG_WKDAY_F1S_ASC
  AVG_WKDAY_F1S_DESC
  AVG_WKDAY_F2S_ASC
  AVG_WKDAY_F2S_DESC
  AVG_WKDAY_F3S_ASC
  AVG_WKDAY_F3S_DESC
  AVG_WKDAY_F4S_ASC
  AVG_WKDAY_F4S_DESC
  AVG_WKDAY_F5S_ASC
  AVG_WKDAY_F5S_DESC
  AVG_WKDAY_F6S_ASC
  AVG_WKDAY_F6S_DESC
  AVG_WKDAY_F7S_ASC
  AVG_WKDAY_F7S_DESC
  AVG_WKDAY_F8S_ASC
  AVG_WKDAY_F8S_DESC
  AVG_WKDAY_F9S_ASC
  AVG_WKDAY_F9S_DESC
  AVG_WKDAY_F10S_ASC
  AVG_WKDAY_F10S_DESC
  AVG_WKDAY_F11S_ASC
  AVG_WKDAY_F11S_DESC
  AVG_WKDAY_F12S_ASC
  AVG_WKDAY_F12S_DESC
  AVG_WKDAY_F13S_ASC
  AVG_WKDAY_F13S_DESC
  AVG_WKDAY_UNCLASSIFIED_ASC
  AVG_WKDAY_UNCLASSIFIED_DESC
  AVG_WKDAY_TOTALS_ASC
  AVG_WKDAY_TOTALS_DESC
  AVG_WKDAY_PERC_F3_13_ASC
  AVG_WKDAY_PERC_F3_13_DESC
  AVG_WKDAY_PERC_F4_13_ASC
  AVG_WKDAY_PERC_F4_13_DESC
  AVG_WKDAY_PERC_F4_7_ASC
  AVG_WKDAY_PERC_F4_7_DESC
  AVG_WKDAY_PERC_F8_13_ASC
  AVG_WKDAY_PERC_F8_13_DESC
  AVG_WKDAY_PERC_F1_ASC
  AVG_WKDAY_PERC_F1_DESC
  AVG_WKDAY_PERC_F2_ASC
  AVG_WKDAY_PERC_F2_DESC
  AVG_WKDAY_PERC_F3_ASC
  AVG_WKDAY_PERC_F3_DESC
  AVG_WKDAY_PERC_F4_ASC
  AVG_WKDAY_PERC_F4_DESC
  AVG_WKDAY_PERC_F5_7_ASC
  AVG_WKDAY_PERC_F5_7_DESC
  AXLE_CORRECTION_FACTOR_ASC
  AXLE_CORRECTION_FACTOR_DESC
  SU_PEAK_ASC
  SU_PEAK_DESC
  CU_PEAK_ASC
  CU_PEAK_DESC
  SU_AADT_ASC
  SU_AADT_DESC
  CU_AADT_ASC
  CU_AADT_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}

# Short count average weekday volume by direction for a given Region and
# Year.  Weekday data is defined as Monday 6am through Friday Noon.
type AverageWeekdayVolume {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: String

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: String

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: String

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # A description of the data type contained in the file.
  dataType: String

  # Vehicle/Axle code in Volume files: 1=Vehicle count 2=Axles/2 count.
  vehicleAxleCode: NysdotVehicleAxleCode

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # The first day of data collection for the count.
  dayOfFirstData: DayOfMonth

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # Indicates if the record represents the total roadway, or just a single
  # direction. ‘blank’ indicates data applies to direction in Federal Direction
  # field. ‘Y’ indicates data applies to the entire roadway.
  fullCount: String

  # The number of vehicles in interval 1 (00:00-01:00) for the Average Weekday.
  avgWkdayInterval1: Int

  # The number of vehicles in interval 2 (01:00-02:00) for the Average Weekday.
  avgWkdayInterval2: Int

  # The number of vehicles in interval 3 (02:00-03:00) for the Average Weekday.
  avgWkdayInterval3: Int

  # The number of vehicles in interval 4 (03:00-04:00) for the Average Weekday.
  avgWkdayInterval4: Int

  # The number of vehicles in interval 5 (04:00-05:00) for the Average Weekday.
  avgWkdayInterval5: Int

  # The number of vehicles in interval 6 (05:00-06:00) for the Average Weekday.
  avgWkdayInterval6: Int

  # The number of vehicles in interval 7 (06:00-07:00) for the Average Weekday.
  avgWkdayInterval7: Int

  # The number of vehicles in interval 8 (07:00-08:00) for the Average Weekday.
  avgWkdayInterval8: Int

  # The number of vehicles in interval 9 (08:00-09:00) for the Average Weekday.
  avgWkdayInterval9: Int

  # The number of vehicles in interval 10 (09:00-10:00) for the Average Weekday.
  avgWkdayInterval10: Int

  # The number of vehicles in interval 11 (10:00-11:00) for the Average Weekday.
  avgWkdayInterval11: Int

  # The number of vehicles in interval 12 (11:00-12:00) for the Average Weekday.
  avgWkdayInterval12: Int

  # The number of vehicles in interval 13 (12:00-13:00) for the Average Weekday.
  avgWkdayInterval13: Int

  # The number of vehicles in interval 14 (13:00-14:00) for the Average Weekday.
  avgWkdayInterval14: Int

  # The number of vehicles in interval 15 (14:00-15:00) for the Average Weekday.
  avgWkdayInterval15: Int

  # The number of vehicles in interval 16 (15:00-16:00) for the Average Weekday.
  avgWkdayInterval16: Int

  # The number of vehicles in interval 17 (16:00-17:00) for the Average Weekday.
  avgWkdayInterval17: Int

  # The number of vehicles in interval 18 (17:00-18:00) for the Average Weekday.
  avgWkdayInterval18: Int

  # The number of vehicles in interval 19 (18:00-19:00) for the Average Weekday.
  avgWkdayInterval19: Int

  # The number of vehicles in interval 20 (19:00-20:00) for the Average Weekday.
  avgWkdayInterval20: Int

  # The number of vehicles in interval 21 (20:00-21:00) for the Average Weekday.
  avgWkdayInterval21: Int

  # The number of vehicles in interval 22 (21:00-22:00) for the Average Weekday.
  avgWkdayInterval22: Int

  # The number of vehicles in interval 23 (22:00-23:00) for the Average Weekday.
  avgWkdayInterval23: Int

  # The number of vehicles in interval 24 (23:00-24:00) for the Average Weekday.
  avgWkdayInterval24: Int

  # The total number of vehicles for the Average Weekday.
  avgWkdayDailyTraffic: Int

  # The seasonal factor applied to calculate the AADT.
  seasonalFactor: Float

  # The axle factor applied to calculate the AADT.
  axleFactor: Float

  # The seasonally adjusted Annual Average of Daily Traffic, representing an Average Day for the location.
  aadt: Int

  # The number of vehicles in the hour with the highest traffic of the Average Weekday.
  highHourValue: Int

  # The interval that contains the highest traffic of the Average Weekday.
  highHourInterval: Int

  # The highest hour of the Average Weekday expressed as a percentages of the
  # Average Weekday total. This value is populated for total roadway records only.
  kFactor: Float

  # The higher direction of the highest hour of the Average Weekday expressed as a
  # percentages of the highest hour total. This value is populated for total
  # roadway records only.
  dFactor: Float

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `AverageWeekdayVolume`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is related to this `AverageWeekdayVolume`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `NysdotVehicleAxleCodeDescription` that is related to this `AverageWeekdayVolume`.
  nysdotVehicleAxleCodeDescriptionByVehicleAxleCode: NysdotVehicleAxleCodeDescription

  # Reads a single `CalendarMonthName` that is related to this `AverageWeekdayVolume`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `AverageWeekdayVolume`.
  dayOfMonthOrdinalByDayOfFirstData: DayOfMonthOrdinal

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `AverageWeekdayVolume`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription
}

# A condition to be used against `AverageWeekdayVolume` object types. All fields
# are tested for equality and combined with a logical ‘and.’
input AverageWeekdayVolumeCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: String

  # Checks for equality with the object’s `regionCode` field.
  regionCode: String

  # Checks for equality with the object’s `countyCode` field.
  countyCode: String

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `vehicleAxleCode` field.
  vehicleAxleCode: NysdotVehicleAxleCode

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `dayOfFirstData` field.
  dayOfFirstData: DayOfMonth

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `fullCount` field.
  fullCount: String

  # Checks for equality with the object’s `avgWkdayInterval1` field.
  avgWkdayInterval1: Int

  # Checks for equality with the object’s `avgWkdayInterval2` field.
  avgWkdayInterval2: Int

  # Checks for equality with the object’s `avgWkdayInterval3` field.
  avgWkdayInterval3: Int

  # Checks for equality with the object’s `avgWkdayInterval4` field.
  avgWkdayInterval4: Int

  # Checks for equality with the object’s `avgWkdayInterval5` field.
  avgWkdayInterval5: Int

  # Checks for equality with the object’s `avgWkdayInterval6` field.
  avgWkdayInterval6: Int

  # Checks for equality with the object’s `avgWkdayInterval7` field.
  avgWkdayInterval7: Int

  # Checks for equality with the object’s `avgWkdayInterval8` field.
  avgWkdayInterval8: Int

  # Checks for equality with the object’s `avgWkdayInterval9` field.
  avgWkdayInterval9: Int

  # Checks for equality with the object’s `avgWkdayInterval10` field.
  avgWkdayInterval10: Int

  # Checks for equality with the object’s `avgWkdayInterval11` field.
  avgWkdayInterval11: Int

  # Checks for equality with the object’s `avgWkdayInterval12` field.
  avgWkdayInterval12: Int

  # Checks for equality with the object’s `avgWkdayInterval13` field.
  avgWkdayInterval13: Int

  # Checks for equality with the object’s `avgWkdayInterval14` field.
  avgWkdayInterval14: Int

  # Checks for equality with the object’s `avgWkdayInterval15` field.
  avgWkdayInterval15: Int

  # Checks for equality with the object’s `avgWkdayInterval16` field.
  avgWkdayInterval16: Int

  # Checks for equality with the object’s `avgWkdayInterval17` field.
  avgWkdayInterval17: Int

  # Checks for equality with the object’s `avgWkdayInterval18` field.
  avgWkdayInterval18: Int

  # Checks for equality with the object’s `avgWkdayInterval19` field.
  avgWkdayInterval19: Int

  # Checks for equality with the object’s `avgWkdayInterval20` field.
  avgWkdayInterval20: Int

  # Checks for equality with the object’s `avgWkdayInterval21` field.
  avgWkdayInterval21: Int

  # Checks for equality with the object’s `avgWkdayInterval22` field.
  avgWkdayInterval22: Int

  # Checks for equality with the object’s `avgWkdayInterval23` field.
  avgWkdayInterval23: Int

  # Checks for equality with the object’s `avgWkdayInterval24` field.
  avgWkdayInterval24: Int

  # Checks for equality with the object’s `avgWkdayDailyTraffic` field.
  avgWkdayDailyTraffic: Int

  # Checks for equality with the object’s `seasonalFactor` field.
  seasonalFactor: Float

  # Checks for equality with the object’s `axleFactor` field.
  axleFactor: Float

  # Checks for equality with the object’s `aadt` field.
  aadt: Int

  # Checks for equality with the object’s `highHourValue` field.
  highHourValue: Int

  # Checks for equality with the object’s `highHourInterval` field.
  highHourInterval: Int

  # Checks for equality with the object’s `kFactor` field.
  kFactor: Float

  # Checks for equality with the object’s `dFactor` field.
  dFactor: Float

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `AverageWeekdayVolume` values.
type AverageWeekdayVolumesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `AverageWeekdayVolume` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `AverageWeekdayVolume` and cursor to aid in pagination.
  edges: [AverageWeekdayVolumesEdge]

  # A list of `AverageWeekdayVolume` objects.
  nodes: [AverageWeekdayVolume!]
}

# A `AverageWeekdayVolume` edge in the connection.
type AverageWeekdayVolumesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `AverageWeekdayVolume` at the end of the edge.
  node: AverageWeekdayVolume!
}

# Methods to use when ordering `AverageWeekdayVolume`.
enum AverageWeekdayVolumesOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  VEHICLE_AXLE_CODE_ASC
  VEHICLE_AXLE_CODE_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_OF_FIRST_DATA_ASC
  DAY_OF_FIRST_DATA_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  FULL_COUNT_ASC
  FULL_COUNT_DESC
  AVG_WKDAY_INTERVAL_1_ASC
  AVG_WKDAY_INTERVAL_1_DESC
  AVG_WKDAY_INTERVAL_2_ASC
  AVG_WKDAY_INTERVAL_2_DESC
  AVG_WKDAY_INTERVAL_3_ASC
  AVG_WKDAY_INTERVAL_3_DESC
  AVG_WKDAY_INTERVAL_4_ASC
  AVG_WKDAY_INTERVAL_4_DESC
  AVG_WKDAY_INTERVAL_5_ASC
  AVG_WKDAY_INTERVAL_5_DESC
  AVG_WKDAY_INTERVAL_6_ASC
  AVG_WKDAY_INTERVAL_6_DESC
  AVG_WKDAY_INTERVAL_7_ASC
  AVG_WKDAY_INTERVAL_7_DESC
  AVG_WKDAY_INTERVAL_8_ASC
  AVG_WKDAY_INTERVAL_8_DESC
  AVG_WKDAY_INTERVAL_9_ASC
  AVG_WKDAY_INTERVAL_9_DESC
  AVG_WKDAY_INTERVAL_10_ASC
  AVG_WKDAY_INTERVAL_10_DESC
  AVG_WKDAY_INTERVAL_11_ASC
  AVG_WKDAY_INTERVAL_11_DESC
  AVG_WKDAY_INTERVAL_12_ASC
  AVG_WKDAY_INTERVAL_12_DESC
  AVG_WKDAY_INTERVAL_13_ASC
  AVG_WKDAY_INTERVAL_13_DESC
  AVG_WKDAY_INTERVAL_14_ASC
  AVG_WKDAY_INTERVAL_14_DESC
  AVG_WKDAY_INTERVAL_15_ASC
  AVG_WKDAY_INTERVAL_15_DESC
  AVG_WKDAY_INTERVAL_16_ASC
  AVG_WKDAY_INTERVAL_16_DESC
  AVG_WKDAY_INTERVAL_17_ASC
  AVG_WKDAY_INTERVAL_17_DESC
  AVG_WKDAY_INTERVAL_18_ASC
  AVG_WKDAY_INTERVAL_18_DESC
  AVG_WKDAY_INTERVAL_19_ASC
  AVG_WKDAY_INTERVAL_19_DESC
  AVG_WKDAY_INTERVAL_20_ASC
  AVG_WKDAY_INTERVAL_20_DESC
  AVG_WKDAY_INTERVAL_21_ASC
  AVG_WKDAY_INTERVAL_21_DESC
  AVG_WKDAY_INTERVAL_22_ASC
  AVG_WKDAY_INTERVAL_22_DESC
  AVG_WKDAY_INTERVAL_23_ASC
  AVG_WKDAY_INTERVAL_23_DESC
  AVG_WKDAY_INTERVAL_24_ASC
  AVG_WKDAY_INTERVAL_24_DESC
  AVG_WKDAY_DAILY_TRAFFIC_ASC
  AVG_WKDAY_DAILY_TRAFFIC_DESC
  SEASONAL_FACTOR_ASC
  SEASONAL_FACTOR_DESC
  AXLE_FACTOR_ASC
  AXLE_FACTOR_DESC
  AADT_ASC
  AADT_DESC
  HIGH_HOUR_VALUE_ASC
  HIGH_HOUR_VALUE_DESC
  HIGH_HOUR_INTERVAL_ASC
  HIGH_HOUR_INTERVAL_DESC
  K_FACTOR_ASC
  K_FACTOR_DESC
  D_FACTOR_ASC
  D_FACTOR_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}

scalar CalendarMonth

type CalendarMonthName implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  calendarMonth: CalendarMonth!
  calendarMonthName: String

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  averageWeekdaySpeedsByMonth(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  averageWeekdayVehicleClassificationsByMonth(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByMonth(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByMonth(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByMonth(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByMonth(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByMonth(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByMonth(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `CalendarMonthName` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input CalendarMonthNameCondition {
  # Checks for equality with the object’s `calendarMonth` field.
  calendarMonth: CalendarMonth

  # Checks for equality with the object’s `calendarMonthName` field.
  calendarMonthName: String
}

# A connection to a list of `CalendarMonthName` values.
type CalendarMonthNamesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `CalendarMonthName` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `CalendarMonthName` and cursor to aid in pagination.
  edges: [CalendarMonthNamesEdge]

  # A list of `CalendarMonthName` objects.
  nodes: [CalendarMonthName!]
}

# A `CalendarMonthName` edge in the connection.
type CalendarMonthNamesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `CalendarMonthName` at the end of the edge.
  node: CalendarMonthName!
}

# Methods to use when ordering `CalendarMonthName`.
enum CalendarMonthNamesOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CALENDAR_MONTH_ASC
  CALENDAR_MONTH_DESC
  CALENDAR_MONTH_NAME_ASC
  CALENDAR_MONTH_NAME_DESC
}

scalar CalendarYear

type ContinuousCountsShp {
  ogcFid: Int!
  objectid: Float
  ccId: String
  rcId: String
  tdvRoute: String
  muni: String
  begindesc: String
  enddesc: String
  latitude: Float
  longitude: Float
  dataType: String
  volTdv: String
  classTdv: String
  speedTdv: String
  aadt: Float
  aadtType: String
  aadtYear: String
  volTxt: String
  classTxt: String
  speedTxt: String
  wimTxt: String
  wimTdv: String
  wkbGeometry: String
}

# A condition to be used against `ContinuousCountsShp` object types. All fields
# are tested for equality and combined with a logical ‘and.’
input ContinuousCountsShpCondition {
  # Checks for equality with the object’s `ogcFid` field.
  ogcFid: Int

  # Checks for equality with the object’s `objectid` field.
  objectid: Float

  # Checks for equality with the object’s `ccId` field.
  ccId: String

  # Checks for equality with the object’s `rcId` field.
  rcId: String

  # Checks for equality with the object’s `tdvRoute` field.
  tdvRoute: String

  # Checks for equality with the object’s `muni` field.
  muni: String

  # Checks for equality with the object’s `begindesc` field.
  begindesc: String

  # Checks for equality with the object’s `enddesc` field.
  enddesc: String

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `volTdv` field.
  volTdv: String

  # Checks for equality with the object’s `classTdv` field.
  classTdv: String

  # Checks for equality with the object’s `speedTdv` field.
  speedTdv: String

  # Checks for equality with the object’s `aadt` field.
  aadt: Float

  # Checks for equality with the object’s `aadtType` field.
  aadtType: String

  # Checks for equality with the object’s `aadtYear` field.
  aadtYear: String

  # Checks for equality with the object’s `volTxt` field.
  volTxt: String

  # Checks for equality with the object’s `classTxt` field.
  classTxt: String

  # Checks for equality with the object’s `speedTxt` field.
  speedTxt: String

  # Checks for equality with the object’s `wimTxt` field.
  wimTxt: String

  # Checks for equality with the object’s `wimTdv` field.
  wimTdv: String

  # Checks for equality with the object’s `wkbGeometry` field.
  wkbGeometry: String
}

# A connection to a list of `ContinuousCountsShp` values.
type ContinuousCountsShpsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ContinuousCountsShp` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ContinuousCountsShp` and cursor to aid in pagination.
  edges: [ContinuousCountsShpsEdge]

  # A list of `ContinuousCountsShp` objects.
  nodes: [ContinuousCountsShp!]
}

# A `ContinuousCountsShp` edge in the connection.
type ContinuousCountsShpsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ContinuousCountsShp` at the end of the edge.
  node: ContinuousCountsShp!
}

# Methods to use when ordering `ContinuousCountsShp`.
enum ContinuousCountsShpsOrderBy {
  NATURAL
  OGC_FID_ASC
  OGC_FID_DESC
  OBJECTID_ASC
  OBJECTID_DESC
  CC_ID_ASC
  CC_ID_DESC
  RC_ID_ASC
  RC_ID_DESC
  TDV_ROUTE_ASC
  TDV_ROUTE_DESC
  MUNI_ASC
  MUNI_DESC
  BEGINDESC_ASC
  BEGINDESC_DESC
  ENDDESC_ASC
  ENDDESC_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  VOL_TDV_ASC
  VOL_TDV_DESC
  CLASS_TDV_ASC
  CLASS_TDV_DESC
  SPEED_TDV_ASC
  SPEED_TDV_DESC
  AADT_ASC
  AADT_DESC
  AADT_TYPE_ASC
  AADT_TYPE_DESC
  AADT_YEAR_ASC
  AADT_YEAR_DESC
  VOL_TXT_ASC
  VOL_TXT_DESC
  CLASS_TXT_ASC
  CLASS_TXT_DESC
  SPEED_TXT_ASC
  SPEED_TXT_DESC
  WIM_TXT_ASC
  WIM_TXT_DESC
  WIM_TDV_ASC
  WIM_TDV_DESC
  WKB_GEOMETRY_ASC
  WKB_GEOMETRY_DESC
}

# Hourly continuous count class data by direction for a given Region and Year.
type ContinuousVehicleClassification {
  # Region County Code, a two digit NYSDOT code representing the Region and County number within the Region.
  rc: String

  # A four digit number, unique within a county representing a specific segment of road for traffic counting purposes.
  station: String

  # The NYSDOT Region number.
  region: NysdotRegion

  # A unique ID for the road where the station is located.
  dotid: String

  # Continuous Count ID, a four digit number identifying a continuous count
  # location within a station. May also be referred to as CCSTA or Continuous
  # Count Station Number.
  ccid: String

  # Functional Class of the roadway segment to which the station applies.
  fc: NysdotFunctionalClassificationCode

  # Route number of the roadway segment to which the station applies.
  route: String

  # Name of the roadway segment to which the station applies.
  roadname: String

  # Name of the county where the station is located.
  county: String

  # The FIPS county code is a five-digit Federal Information Processing Standards
  # (FIPS) code (FIPS 6-4) which uniquely identifies counties and county
  # equivalents in the United States, certain U.S. possessions, and certain freely
  # associated states.
  countyFips: String

  # A description of the beginning of the roadway segment to which the station applies.
  beginDesc: String

  # A description of the ending of the roadway segment to which the station applies.
  endDesc: String

  # A concatenation of the Region County and Station fields. Creates a Unique six character ID for each station statewide.
  stationId: String

  # The direction of the data for each record. 99 represents data traveling from
  # the Begin Desc to the End Desc, or primary direction. ‐99 represents data
  # traveling from the End Desc to the Begin Desc, or non‐primary direction.
  road: NysdotRoadDirectionCode

  # Indicates if the segment is a one‐way road. ‘Y’ for one‐way or null for bi‐directional.
  oneWay: NysdotOneWayRoadFlag

  # The year in which the data was collected.
  year: CalendarYear

  # Where applicable, the month in which the data was collected.
  month: CalendarMonth

  # Where applicable, the day of the month on which the data was collected.
  day: DayOfMonth

  # Day of Week. Where applicable, the day of week, expressed as 1‐7 with 1 being Sunday and 7 being Saturday.
  dow: DayOfWeekCode

  # Where applicable, the hour of the day in which the data was collected.
  # Represented as 0‐23 where 0 is data from 12am‐1am and so on.
  hour: HourOfDay

  # The number of vehicles in FHWA F‐scheme class f1 (Motorcycles) for the interval represented.
  f1: Int

  # The number of vehicles in FHWA F‐scheme class f2 (Autos) for the interval represented.
  f2: Int

  # The number of vehicles in FHWA F‐scheme class f3 (2 axle, 4‐tire pickups, vans, motor‐homes) for the interval represented.
  f3: Int

  # The number of vehicles in FHWA F‐scheme class f4 (Buses) for the interval represented.
  f4: Int

  # The number of vehicles in FHWA F‐scheme class f5 (2 axle, 6‐tire single unit trucks) for the interval represented.
  f5: Int

  # The number of vehicles in FHWA F‐scheme class f6 (3 axle single unit trucks) for the interval represented.
  f6: Int

  # The number of vehicles in FHWA F‐scheme class f7 (4 or more axle single unit trucks) for the interval represented.
  f7: Int

  # The number of vehicles in FHWA F‐scheme class f8 (4 or less axle vehicles, single trailer) for the interval represented.
  f8: Int

  # The number of vehicles in FHWA F‐scheme class f9 (5 axle, single trailer) for the interval represented.
  f9: Int

  # The number of vehicles in FHWA F‐scheme class f10 (6 or more axle, single trailer) for the interval represented.
  f10: Int

  # The number of vehicles in FHWA F‐scheme class f11 (5 axle multi‐trailer trucks) for the interval represented.
  f11: Int

  # The number of vehicles in FHWA F‐scheme class f12 (6 axle multi‐trailer trucks) for the interval represented.
  f12: Int

  # The number of vehicles in FHWA F‐scheme class f13 (7 or more axle multi‐trailer trucks) for the interval represented.
  f13: Int

  # Reads a single `NysdotRegionName` that is related to this `ContinuousVehicleClassification`.
  nysdotRegionNameByRegion: NysdotRegionName

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `ContinuousVehicleClassification`.
  nysdotFunctionalClassificationCodeDescriptionByFc: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotRoadDirectionCodeDescription` that is related to this `ContinuousVehicleClassification`.
  nysdotRoadDirectionCodeDescriptionByRoad: NysdotRoadDirectionCodeDescription

  # Reads a single `NysdotOneWayRoadFlagDescription` that is related to this `ContinuousVehicleClassification`.
  nysdotOneWayRoadFlagDescriptionByOneWay: NysdotOneWayRoadFlagDescription

  # Reads a single `CalendarMonthName` that is related to this `ContinuousVehicleClassification`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `ContinuousVehicleClassification`.
  dayOfMonthOrdinalByDay: DayOfMonthOrdinal

  # Reads a single `DaysOfWeek` that is related to this `ContinuousVehicleClassification`.
  daysOfWeekByDow: DaysOfWeek

  # Reads a single `HourOfDayRange` that is related to this `ContinuousVehicleClassification`.
  hourOfDayRangeByHour: HourOfDayRange
}

# A condition to be used against `ContinuousVehicleClassification` object types.
# All fields are tested for equality and combined with a logical ‘and.’
input ContinuousVehicleClassificationCondition {
  # Checks for equality with the object’s `rc` field.
  rc: String

  # Checks for equality with the object’s `station` field.
  station: String

  # Checks for equality with the object’s `region` field.
  region: NysdotRegion

  # Checks for equality with the object’s `dotid` field.
  dotid: String

  # Checks for equality with the object’s `ccid` field.
  ccid: String

  # Checks for equality with the object’s `fc` field.
  fc: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `route` field.
  route: String

  # Checks for equality with the object’s `roadname` field.
  roadname: String

  # Checks for equality with the object’s `county` field.
  county: String

  # Checks for equality with the object’s `countyFips` field.
  countyFips: String

  # Checks for equality with the object’s `beginDesc` field.
  beginDesc: String

  # Checks for equality with the object’s `endDesc` field.
  endDesc: String

  # Checks for equality with the object’s `stationId` field.
  stationId: String

  # Checks for equality with the object’s `road` field.
  road: NysdotRoadDirectionCode

  # Checks for equality with the object’s `oneWay` field.
  oneWay: NysdotOneWayRoadFlag

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `day` field.
  day: DayOfMonth

  # Checks for equality with the object’s `dow` field.
  dow: DayOfWeekCode

  # Checks for equality with the object’s `hour` field.
  hour: HourOfDay

  # Checks for equality with the object’s `f1` field.
  f1: Int

  # Checks for equality with the object’s `f2` field.
  f2: Int

  # Checks for equality with the object’s `f3` field.
  f3: Int

  # Checks for equality with the object’s `f4` field.
  f4: Int

  # Checks for equality with the object’s `f5` field.
  f5: Int

  # Checks for equality with the object’s `f6` field.
  f6: Int

  # Checks for equality with the object’s `f7` field.
  f7: Int

  # Checks for equality with the object’s `f8` field.
  f8: Int

  # Checks for equality with the object’s `f9` field.
  f9: Int

  # Checks for equality with the object’s `f10` field.
  f10: Int

  # Checks for equality with the object’s `f11` field.
  f11: Int

  # Checks for equality with the object’s `f12` field.
  f12: Int

  # Checks for equality with the object’s `f13` field.
  f13: Int
}

# A connection to a list of `ContinuousVehicleClassification` values.
type ContinuousVehicleClassificationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ContinuousVehicleClassification` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ContinuousVehicleClassification` and cursor to aid in pagination.
  edges: [ContinuousVehicleClassificationsEdge]

  # A list of `ContinuousVehicleClassification` objects.
  nodes: [ContinuousVehicleClassification!]
}

# A `ContinuousVehicleClassification` edge in the connection.
type ContinuousVehicleClassificationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ContinuousVehicleClassification` at the end of the edge.
  node: ContinuousVehicleClassification!
}

# Methods to use when ordering `ContinuousVehicleClassification`.
enum ContinuousVehicleClassificationsOrderBy {
  NATURAL
  RC_ASC
  RC_DESC
  STATION_ASC
  STATION_DESC
  REGION_ASC
  REGION_DESC
  DOTID_ASC
  DOTID_DESC
  CCID_ASC
  CCID_DESC
  FC_ASC
  FC_DESC
  ROUTE_ASC
  ROUTE_DESC
  ROADNAME_ASC
  ROADNAME_DESC
  COUNTY_ASC
  COUNTY_DESC
  COUNTY_FIPS_ASC
  COUNTY_FIPS_DESC
  BEGIN_DESC_ASC
  BEGIN_DESC_DESC
  END_DESC_ASC
  END_DESC_DESC
  STATION_ID_ASC
  STATION_ID_DESC
  ROAD_ASC
  ROAD_DESC
  ONE_WAY_ASC
  ONE_WAY_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_ASC
  DAY_DESC
  DOW_ASC
  DOW_DESC
  HOUR_ASC
  HOUR_DESC
  F1_ASC
  F1_DESC
  F2_ASC
  F2_DESC
  F3_ASC
  F3_DESC
  F4_ASC
  F4_DESC
  F5_ASC
  F5_DESC
  F6_ASC
  F6_DESC
  F7_ASC
  F7_DESC
  F8_ASC
  F8_DESC
  F9_ASC
  F9_DESC
  F10_ASC
  F10_DESC
  F11_ASC
  F11_DESC
  F12_ASC
  F12_DESC
  F13_ASC
  F13_DESC
}

# Hourly continuous count volume data by direction.
type ContinuousVolume {
  # Region County Code, a two digit NYSDOT code representing the Region and County number within the Region.
  rc: String

  # A four digit number, unique within a county representing a specific segment of road.
  station: String

  # The NYSDOT Region number.
  region: NysdotRegion

  # A unique ID.
  dotid: String

  # Continuous Count ID, a four digit number identifying a continuous count
  # location within a station. May also be referred to as CCSTA or Continuous
  # Count Station Number.
  ccid: String

  # Functional Class of the roadway segment to which the station applies.
  fc: NysdotFunctionalClassificationCode

  # Route number of the roadway segment to which the station applies.
  route: String

  # Name of the roadway segment to which the station applies.
  roadname: String

  # Name of the county where the station is located.
  county: String

  # The FIPS county code is a five-digit Federal Information Processing Standards
  # (FIPS) code (FIPS 6-4) which uniquely identifies counties and county
  # equivalents in the United States, certain U.S. possessions, and certain freely
  # associated states.
  countyFips: String

  # A description of the beginning of the roadway segment to which the station applies.
  beginDesc: String

  # A description of the ending of the roadway segment to which the station applies.
  endDesc: String

  # A concatenation of the Region County and Station fields. Creates a Unique six character ID.
  stationId: String

  # The direction of the data.
  road: NysdotRoadDirectionCode

  # Indicates if the segment is a one‐way road. ‘Y’.
  oneWay: NysdotOneWayRoadFlag

  # The year in which the data was collected.
  year: CalendarYear

  # Where applicable, the month in which the data was collected.
  month: CalendarMonth

  # Where applicable, the day of the month on which the data was collected.
  day: DayOfMonth

  # Day of Week. Where applicable, the day of week, expressed as 1‐7 with 1 being Sunday and 7 being Saturday.
  dow: DayOfWeekCode

  # Where applicable, the volume in interval 1 (00:00-01:00).
  i1: Int

  # Where applicable, the volume in interval 2 (01:00-02:00).
  i2: Int

  # Where applicable, the volume in interval 3 (02:00-03:00).
  i3: Int

  # Where applicable, the volume in interval 4 (03:00-04:00).
  i4: Int

  # Where applicable, the volume in interval 5 (04:00-05:00).
  i5: Int

  # Where applicable, the volume in interval 6 (05:00-06:00).
  i6: Int

  # Where applicable, the volume in interval 7 (06:00-07:00).
  i7: Int

  # Where applicable, the volume in interval 8 (07:00-08:00).
  i8: Int

  # Where applicable, the volume in interval 9 (08:00-09:00).
  i9: Int

  # Where applicable, the volume in interval 10 (09:00-10:00).
  i10: Int

  # Where applicable, the volume in interval 11 (10:00-11:00).
  i11: Int

  # Where applicable, the volume in interval 12 (11:00-12:00).
  i12: Int

  # Where applicable, the volume in interval 13 (12:00-13:00).
  i13: Int

  # Where applicable, the volume in interval 14 (13:00-14:00).
  i14: Int

  # Where applicable, the volume in interval 15 (14:00-15:00).
  i15: Int

  # Where applicable, the volume in interval 16 (15:00-16:00).
  i16: Int

  # Where applicable, the volume in interval 17 (16:00-17:00).
  i17: Int

  # Where applicable, the volume in interval 18 (17:00-18:00).
  i18: Int

  # Where applicable, the volume in interval 19 (18:00-19:00).
  i19: Int

  # Where applicable, the volume in interval 20 (19:00-20:00).
  i20: Int

  # Where applicable, the volume in interval 21 (20:00-21:00).
  i21: Int

  # Where applicable, the volume in interval 22 (21:00-22:00).
  i22: Int

  # Where applicable, the volume in interval 23 (22:00-23:00).
  i23: Int

  # Where applicable, the volume in interval 24 (23:00-24:00).
  i24: Int

  # Reads a single `NysdotRegionName` that is related to this `ContinuousVolume`.
  nysdotRegionNameByRegion: NysdotRegionName

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `ContinuousVolume`.
  nysdotFunctionalClassificationCodeDescriptionByFc: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotRoadDirectionCodeDescription` that is related to this `ContinuousVolume`.
  nysdotRoadDirectionCodeDescriptionByRoad: NysdotRoadDirectionCodeDescription

  # Reads a single `NysdotOneWayRoadFlagDescription` that is related to this `ContinuousVolume`.
  nysdotOneWayRoadFlagDescriptionByOneWay: NysdotOneWayRoadFlagDescription

  # Reads a single `CalendarMonthName` that is related to this `ContinuousVolume`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `ContinuousVolume`.
  dayOfMonthOrdinalByDay: DayOfMonthOrdinal

  # Reads a single `DaysOfWeek` that is related to this `ContinuousVolume`.
  daysOfWeekByDow: DaysOfWeek
}

# A condition to be used against `ContinuousVolume` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input ContinuousVolumeCondition {
  # Checks for equality with the object’s `rc` field.
  rc: String

  # Checks for equality with the object’s `station` field.
  station: String

  # Checks for equality with the object’s `region` field.
  region: NysdotRegion

  # Checks for equality with the object’s `dotid` field.
  dotid: String

  # Checks for equality with the object’s `ccid` field.
  ccid: String

  # Checks for equality with the object’s `fc` field.
  fc: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `route` field.
  route: String

  # Checks for equality with the object’s `roadname` field.
  roadname: String

  # Checks for equality with the object’s `county` field.
  county: String

  # Checks for equality with the object’s `countyFips` field.
  countyFips: String

  # Checks for equality with the object’s `beginDesc` field.
  beginDesc: String

  # Checks for equality with the object’s `endDesc` field.
  endDesc: String

  # Checks for equality with the object’s `stationId` field.
  stationId: String

  # Checks for equality with the object’s `road` field.
  road: NysdotRoadDirectionCode

  # Checks for equality with the object’s `oneWay` field.
  oneWay: NysdotOneWayRoadFlag

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `day` field.
  day: DayOfMonth

  # Checks for equality with the object’s `dow` field.
  dow: DayOfWeekCode

  # Checks for equality with the object’s `i1` field.
  i1: Int

  # Checks for equality with the object’s `i2` field.
  i2: Int

  # Checks for equality with the object’s `i3` field.
  i3: Int

  # Checks for equality with the object’s `i4` field.
  i4: Int

  # Checks for equality with the object’s `i5` field.
  i5: Int

  # Checks for equality with the object’s `i6` field.
  i6: Int

  # Checks for equality with the object’s `i7` field.
  i7: Int

  # Checks for equality with the object’s `i8` field.
  i8: Int

  # Checks for equality with the object’s `i9` field.
  i9: Int

  # Checks for equality with the object’s `i10` field.
  i10: Int

  # Checks for equality with the object’s `i11` field.
  i11: Int

  # Checks for equality with the object’s `i12` field.
  i12: Int

  # Checks for equality with the object’s `i13` field.
  i13: Int

  # Checks for equality with the object’s `i14` field.
  i14: Int

  # Checks for equality with the object’s `i15` field.
  i15: Int

  # Checks for equality with the object’s `i16` field.
  i16: Int

  # Checks for equality with the object’s `i17` field.
  i17: Int

  # Checks for equality with the object’s `i18` field.
  i18: Int

  # Checks for equality with the object’s `i19` field.
  i19: Int

  # Checks for equality with the object’s `i20` field.
  i20: Int

  # Checks for equality with the object’s `i21` field.
  i21: Int

  # Checks for equality with the object’s `i22` field.
  i22: Int

  # Checks for equality with the object’s `i23` field.
  i23: Int

  # Checks for equality with the object’s `i24` field.
  i24: Int
}

# A connection to a list of `ContinuousVolume` values.
type ContinuousVolumesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ContinuousVolume` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ContinuousVolume` and cursor to aid in pagination.
  edges: [ContinuousVolumesEdge]

  # A list of `ContinuousVolume` objects.
  nodes: [ContinuousVolume!]
}

# A `ContinuousVolume` edge in the connection.
type ContinuousVolumesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ContinuousVolume` at the end of the edge.
  node: ContinuousVolume!
}

# Methods to use when ordering `ContinuousVolume`.
enum ContinuousVolumesOrderBy {
  NATURAL
  RC_ASC
  RC_DESC
  STATION_ASC
  STATION_DESC
  REGION_ASC
  REGION_DESC
  DOTID_ASC
  DOTID_DESC
  CCID_ASC
  CCID_DESC
  FC_ASC
  FC_DESC
  ROUTE_ASC
  ROUTE_DESC
  ROADNAME_ASC
  ROADNAME_DESC
  COUNTY_ASC
  COUNTY_DESC
  COUNTY_FIPS_ASC
  COUNTY_FIPS_DESC
  BEGIN_DESC_ASC
  BEGIN_DESC_DESC
  END_DESC_ASC
  END_DESC_DESC
  STATION_ID_ASC
  STATION_ID_DESC
  ROAD_ASC
  ROAD_DESC
  ONE_WAY_ASC
  ONE_WAY_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_ASC
  DAY_DESC
  DOW_ASC
  DOW_DESC
  I1_ASC
  I1_DESC
  I2_ASC
  I2_DESC
  I3_ASC
  I3_DESC
  I4_ASC
  I4_DESC
  I5_ASC
  I5_DESC
  I6_ASC
  I6_DESC
  I7_ASC
  I7_DESC
  I8_ASC
  I8_DESC
  I9_ASC
  I9_DESC
  I10_ASC
  I10_DESC
  I11_ASC
  I11_DESC
  I12_ASC
  I12_DESC
  I13_ASC
  I13_DESC
  I14_ASC
  I14_DESC
  I15_ASC
  I15_DESC
  I16_ASC
  I16_DESC
  I17_ASC
  I17_DESC
  I18_ASC
  I18_DESC
  I19_ASC
  I19_DESC
  I20_ASC
  I20_DESC
  I21_ASC
  I21_DESC
  I22_ASC
  I22_DESC
  I23_ASC
  I23_DESC
  I24_ASC
  I24_DESC
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

scalar DayOfMonth

type DayOfMonthOrdinal implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  dayOfMonth: DayOfMonth!
  dayOfMonthOrdinal: String

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  averageWeekdaySpeedsByDayOfFirstData(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  averageWeekdayVehicleClassificationsByDayOfFirstData(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByDayOfFirstData(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByDay(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByDay(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByDay(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByDay(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByDay(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `DayOfMonthOrdinal` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input DayOfMonthOrdinalCondition {
  # Checks for equality with the object’s `dayOfMonth` field.
  dayOfMonth: DayOfMonth

  # Checks for equality with the object’s `dayOfMonthOrdinal` field.
  dayOfMonthOrdinal: String
}

# A connection to a list of `DayOfMonthOrdinal` values.
type DayOfMonthOrdinalsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `DayOfMonthOrdinal` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `DayOfMonthOrdinal` and cursor to aid in pagination.
  edges: [DayOfMonthOrdinalsEdge]

  # A list of `DayOfMonthOrdinal` objects.
  nodes: [DayOfMonthOrdinal!]
}

# A `DayOfMonthOrdinal` edge in the connection.
type DayOfMonthOrdinalsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `DayOfMonthOrdinal` at the end of the edge.
  node: DayOfMonthOrdinal!
}

# Methods to use when ordering `DayOfMonthOrdinal`.
enum DayOfMonthOrdinalsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  DAY_OF_MONTH_ASC
  DAY_OF_MONTH_DESC
  DAY_OF_MONTH_ORDINAL_ASC
  DAY_OF_MONTH_ORDINAL_DESC
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

scalar DayOfWeekCode

type DaysOfWeek implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  dow: DayOfWeekCode!
  dayOfWeek: DayOfWeek

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByDow(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByDow(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByDayOfWeek(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByDayOfWeek(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByDayOfWeek(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `DaysOfWeek` object types. All fields are tested
# for equality and combined with a logical ‘and.’
input DaysOfWeekCondition {
  # Checks for equality with the object’s `dow` field.
  dow: DayOfWeekCode

  # Checks for equality with the object’s `dayOfWeek` field.
  dayOfWeek: DayOfWeek
}

# A connection to a list of `DaysOfWeek` values.
type DaysOfWeeksConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `DaysOfWeek` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `DaysOfWeek` and cursor to aid in pagination.
  edges: [DaysOfWeeksEdge]

  # A list of `DaysOfWeek` objects.
  nodes: [DaysOfWeek!]
}

# A `DaysOfWeek` edge in the connection.
type DaysOfWeeksEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `DaysOfWeek` at the end of the edge.
  node: DaysOfWeek!
}

# Methods to use when ordering `DaysOfWeek`.
enum DaysOfWeeksOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  DOW_ASC
  DOW_DESC
  DAY_OF_WEEK_ASC
  DAY_OF_WEEK_DESC
}

# The direction of travel of the main roadway.
scalar FhwaDirectionOfTravelCode

type FhwaDirectionOfTravelCodeDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  code: FhwaDirectionOfTravelCode!
  description: String

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  averageWeekdaySpeedsByFederalDirection(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  averageWeekdayVehicleClassificationsByFederalDirection(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByFederalDirection(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByFederalDirection(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByFederalDirection(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByFederalDirection(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `FhwaDirectionOfTravelCodeDescription` object
# types. All fields are tested for equality and combined with a logical ‘and.’
input FhwaDirectionOfTravelCodeDescriptionCondition {
  # Checks for equality with the object’s `code` field.
  code: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `description` field.
  description: String
}

# A connection to a list of `FhwaDirectionOfTravelCodeDescription` values.
type FhwaDirectionOfTravelCodeDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `FhwaDirectionOfTravelCodeDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `FhwaDirectionOfTravelCodeDescription` and cursor to aid in pagination.
  edges: [FhwaDirectionOfTravelCodeDescriptionsEdge]

  # A list of `FhwaDirectionOfTravelCodeDescription` objects.
  nodes: [FhwaDirectionOfTravelCodeDescription!]
}

# A `FhwaDirectionOfTravelCodeDescription` edge in the connection.
type FhwaDirectionOfTravelCodeDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `FhwaDirectionOfTravelCodeDescription` at the end of the edge.
  node: FhwaDirectionOfTravelCodeDescription!
}

# Methods to use when ordering `FhwaDirectionOfTravelCodeDescription`.
enum FhwaDirectionOfTravelCodeDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CODE_ASC
  CODE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

# The FHWA 13-category classification rule set currently used for most Federal
# reporting requirements and that serves as the basis for most State vehicle
# classification counting efforts.
enum FhwaFSchemeClass {
  F1
  F2
  F3
  F4
  F5
  F6
  F7
  F8
  F9
  F10
  F11
  F12
  F13
}

# The classification scheme is separated into categories depending on whether the
# vehicle carries passengers or commodities. Non-passenger vehicles are further
# subdivided by number of axles and number of units, including both power and trailer units.
type FhwaFSchemeClassDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  class: FhwaFSchemeClass!
  shortDescription: String
  longDescription: String
}

# A condition to be used against `FhwaFSchemeClassDescription` object types. All
# fields are tested for equality and combined with a logical ‘and.’
input FhwaFSchemeClassDescriptionCondition {
  # Checks for equality with the object’s `class` field.
  class: FhwaFSchemeClass

  # Checks for equality with the object’s `shortDescription` field.
  shortDescription: String

  # Checks for equality with the object’s `longDescription` field.
  longDescription: String
}

# A connection to a list of `FhwaFSchemeClassDescription` values.
type FhwaFSchemeClassDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `FhwaFSchemeClassDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `FhwaFSchemeClassDescription` and cursor to aid in pagination.
  edges: [FhwaFSchemeClassDescriptionsEdge]

  # A list of `FhwaFSchemeClassDescription` objects.
  nodes: [FhwaFSchemeClassDescription!]
}

# A `FhwaFSchemeClassDescription` edge in the connection.
type FhwaFSchemeClassDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `FhwaFSchemeClassDescription` at the end of the edge.
  node: FhwaFSchemeClassDescription!
}

# Methods to use when ordering `FhwaFSchemeClassDescription`.
enum FhwaFSchemeClassDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CLASS_ASC
  CLASS_DESC
  SHORT_DESCRIPTION_ASC
  SHORT_DESCRIPTION_DESC
  LONG_DESCRIPTION_ASC
  LONG_DESCRIPTION_DESC
}

scalar HourOfDay

type HourOfDayRange implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  hourOfDay: HourOfDay!
  timeOfDayRange: String

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByHour(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection
}

# A condition to be used against `HourOfDayRange` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input HourOfDayRangeCondition {
  # Checks for equality with the object’s `hourOfDay` field.
  hourOfDay: HourOfDay

  # Checks for equality with the object’s `timeOfDayRange` field.
  timeOfDayRange: String
}

# A connection to a list of `HourOfDayRange` values.
type HourOfDayRangesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `HourOfDayRange` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `HourOfDayRange` and cursor to aid in pagination.
  edges: [HourOfDayRangesEdge]

  # A list of `HourOfDayRange` objects.
  nodes: [HourOfDayRange!]
}

# A `HourOfDayRange` edge in the connection.
type HourOfDayRangesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `HourOfDayRange` at the end of the edge.
  node: HourOfDayRange!
}

# Methods to use when ordering `HourOfDayRange`.
enum HourOfDayRangesOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  HOUR_OF_DAY_ASC
  HOUR_OF_DAY_DESC
  TIME_OF_DAY_RANGE_ASC
  TIME_OF_DAY_RANGE_DESC
}

# An object with a globally unique `ID`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
}

# The interval which the record applies. 1.1 indicates the first 15 minutes of the
# first hour of the day, or 00:00 through 00:15. 1.2 represents 00:15‐00:30, 12.3
# represents 11:30‐11:45, 23.4 represents 22:45‐23:00 and so on.
scalar NysdotDataInterval

# NYSDOT data_interval code descriptions.
type NysdotDataIntervalDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!

  # NYSDOT data_interval code.
  dataInterval: NysdotDataInterval!

  # NYSDOT data_interval code description.
  dataIntervalDescription: String

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByDataInterval(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByDataInterval(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection
}

# A condition to be used against `NysdotDataIntervalDescription` object types. All
# fields are tested for equality and combined with a logical ‘and.’
input NysdotDataIntervalDescriptionCondition {
  # Checks for equality with the object’s `dataInterval` field.
  dataInterval: NysdotDataInterval

  # Checks for equality with the object’s `dataIntervalDescription` field.
  dataIntervalDescription: String
}

# A connection to a list of `NysdotDataIntervalDescription` values.
type NysdotDataIntervalDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotDataIntervalDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotDataIntervalDescription` and cursor to aid in pagination.
  edges: [NysdotDataIntervalDescriptionsEdge]

  # A list of `NysdotDataIntervalDescription` objects.
  nodes: [NysdotDataIntervalDescription!]
}

# A `NysdotDataIntervalDescription` edge in the connection.
type NysdotDataIntervalDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotDataIntervalDescription` at the end of the edge.
  node: NysdotDataIntervalDescription!
}

# Methods to use when ordering `NysdotDataIntervalDescription`.
enum NysdotDataIntervalDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  DATA_INTERVAL_ASC
  DATA_INTERVAL_DESC
  DATA_INTERVAL_DESCRIPTION_ASC
  DATA_INTERVAL_DESCRIPTION_DESC
}

scalar NysdotFunctionalClassificationCode

type NysdotFunctionalClassificationCodeDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  code: NysdotFunctionalClassificationCode!
  distinctor: NysdotFunctionalClassificationDistinctor
  description: String

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  averageWeekdaySpeedsByFunctionalClass(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  averageWeekdayVehicleClassificationsByFunctionalClass(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByFunctionalClass(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByFc(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByFc(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByFunctionalClass(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByFunctionalClass(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByFunctionalClass(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `NysdotFunctionalClassificationCodeDescription`
# object types. All fields are tested for equality and combined with a logical ‘and.’
input NysdotFunctionalClassificationCodeDescriptionCondition {
  # Checks for equality with the object’s `code` field.
  code: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `distinctor` field.
  distinctor: NysdotFunctionalClassificationDistinctor

  # Checks for equality with the object’s `description` field.
  description: String
}

# A connection to a list of `NysdotFunctionalClassificationCodeDescription` values.
type NysdotFunctionalClassificationCodeDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotFunctionalClassificationCodeDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotFunctionalClassificationCodeDescription` and cursor to aid in pagination.
  edges: [NysdotFunctionalClassificationCodeDescriptionsEdge]

  # A list of `NysdotFunctionalClassificationCodeDescription` objects.
  nodes: [NysdotFunctionalClassificationCodeDescription!]
}

# A `NysdotFunctionalClassificationCodeDescription` edge in the connection.
type NysdotFunctionalClassificationCodeDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotFunctionalClassificationCodeDescription` at the end of the edge.
  node: NysdotFunctionalClassificationCodeDescription!
}

# Methods to use when ordering `NysdotFunctionalClassificationCodeDescription`.
enum NysdotFunctionalClassificationCodeDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CODE_ASC
  CODE_DESC
  DISTINCTOR_ASC
  DISTINCTOR_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

enum NysdotFunctionalClassificationDistinctor {
  NYS_CODES_URBAN
  NYS_CODES_RURAL
}

scalar NysdotOneWayRoadFlag

# Indicates if the segment is a one‐way road. ‘Y’ for one‐way or null for bi‐directional.
type NysdotOneWayRoadFlagDescription {
  flagValue: NysdotOneWayRoadFlag
  description: String

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByOneWay(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByOneWay(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection
}

# A condition to be used against `NysdotOneWayRoadFlagDescription` object types.
# All fields are tested for equality and combined with a logical ‘and.’
input NysdotOneWayRoadFlagDescriptionCondition {
  # Checks for equality with the object’s `flagValue` field.
  flagValue: NysdotOneWayRoadFlag

  # Checks for equality with the object’s `description` field.
  description: String
}

# A connection to a list of `NysdotOneWayRoadFlagDescription` values.
type NysdotOneWayRoadFlagDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotOneWayRoadFlagDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotOneWayRoadFlagDescription` and cursor to aid in pagination.
  edges: [NysdotOneWayRoadFlagDescriptionsEdge]

  # A list of `NysdotOneWayRoadFlagDescription` objects.
  nodes: [NysdotOneWayRoadFlagDescription!]
}

# A `NysdotOneWayRoadFlagDescription` edge in the connection.
type NysdotOneWayRoadFlagDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotOneWayRoadFlagDescription` at the end of the edge.
  node: NysdotOneWayRoadFlagDescription!
}

# Methods to use when ordering `NysdotOneWayRoadFlagDescription`.
enum NysdotOneWayRoadFlagDescriptionsOrderBy {
  NATURAL
  FLAG_VALUE_ASC
  FLAG_VALUE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

# The NYSDOT Region numbers.
scalar NysdotRegion

# NYS DOT Regions.
type NysdotRegionName implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!

  # The Region Number, a number 1-11 representing a NYSDOT Region.
  region: NysdotRegion!

  # Name of the NYSDOT Region.
  name: String

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByRegion(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByRegion(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection
}

# A condition to be used against `NysdotRegionName` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input NysdotRegionNameCondition {
  # Checks for equality with the object’s `region` field.
  region: NysdotRegion

  # Checks for equality with the object’s `name` field.
  name: String
}

# A connection to a list of `NysdotRegionName` values.
type NysdotRegionNamesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotRegionName` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotRegionName` and cursor to aid in pagination.
  edges: [NysdotRegionNamesEdge]

  # A list of `NysdotRegionName` objects.
  nodes: [NysdotRegionName!]
}

# A `NysdotRegionName` edge in the connection.
type NysdotRegionNamesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotRegionName` at the end of the edge.
  node: NysdotRegionName!
}

# Methods to use when ordering `NysdotRegionName`.
enum NysdotRegionNamesOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  REGION_ASC
  REGION_DESC
  NAME_ASC
  NAME_DESC
}

scalar NysdotRoadDirectionCode

# The direction of the data for each record.
type NysdotRoadDirectionCodeDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  code: NysdotRoadDirectionCode!
  description: String

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  continuousVehicleClassificationsByRoad(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  continuousVolumesByRoad(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection
}

# A condition to be used against `NysdotRoadDirectionCodeDescription` object
# types. All fields are tested for equality and combined with a logical ‘and.’
input NysdotRoadDirectionCodeDescriptionCondition {
  # Checks for equality with the object’s `code` field.
  code: NysdotRoadDirectionCode

  # Checks for equality with the object’s `description` field.
  description: String
}

# A connection to a list of `NysdotRoadDirectionCodeDescription` values.
type NysdotRoadDirectionCodeDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotRoadDirectionCodeDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotRoadDirectionCodeDescription` and cursor to aid in pagination.
  edges: [NysdotRoadDirectionCodeDescriptionsEdge]

  # A list of `NysdotRoadDirectionCodeDescription` objects.
  nodes: [NysdotRoadDirectionCodeDescription!]
}

# A `NysdotRoadDirectionCodeDescription` edge in the connection.
type NysdotRoadDirectionCodeDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotRoadDirectionCodeDescription` at the end of the edge.
  node: NysdotRoadDirectionCodeDescription!
}

# Methods to use when ordering `NysdotRoadDirectionCodeDescription`.
enum NysdotRoadDirectionCodeDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CODE_ASC
  CODE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

# Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
scalar NysdotSeasonalAdjustmentFactorGroup

type NysdotSeasonalAdjustmentFactorGroupDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  factorGroup: NysdotSeasonalAdjustmentFactorGroup!
  shortDescription: String
  longDescription: String

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  averageWeekdaySpeedsByFactorGroup(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  averageWeekdayVehicleClassificationsByFactorGroup(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByFactorGroup(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  shortCountSpeedsByFactorGroup(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  shortCountVehicleClassificationsByFactorGroup(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByFactorGroup(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `NysdotSeasonalAdjustmentFactorGroupDescription`
# object types. All fields are tested for equality and combined with a logical ‘and.’
input NysdotSeasonalAdjustmentFactorGroupDescriptionCondition {
  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `shortDescription` field.
  shortDescription: String

  # Checks for equality with the object’s `longDescription` field.
  longDescription: String
}

# A connection to a list of `NysdotSeasonalAdjustmentFactorGroupDescription` values.
type NysdotSeasonalAdjustmentFactorGroupDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotSeasonalAdjustmentFactorGroupDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotSeasonalAdjustmentFactorGroupDescription` and cursor to aid in pagination.
  edges: [NysdotSeasonalAdjustmentFactorGroupDescriptionsEdge]

  # A list of `NysdotSeasonalAdjustmentFactorGroupDescription` objects.
  nodes: [NysdotSeasonalAdjustmentFactorGroupDescription!]
}

# A `NysdotSeasonalAdjustmentFactorGroupDescription` edge in the connection.
type NysdotSeasonalAdjustmentFactorGroupDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotSeasonalAdjustmentFactorGroupDescription` at the end of the edge.
  node: NysdotSeasonalAdjustmentFactorGroupDescription!
}

# Methods to use when ordering `NysdotSeasonalAdjustmentFactorGroupDescription`.
enum NysdotSeasonalAdjustmentFactorGroupDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  SHORT_DESCRIPTION_ASC
  SHORT_DESCRIPTION_DESC
  LONG_DESCRIPTION_ASC
  LONG_DESCRIPTION_DESC
}

# Vehicle/Axle code in Volume files: 1=Vehicle count 2=Axles/2 count.
scalar NysdotVehicleAxleCode

# Descriptions for the NYSDOT vehicle_axle_codes.
type NysdotVehicleAxleCodeDescription implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  code: NysdotVehicleAxleCode!
  description: String

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  averageWeekdayVolumesByVehicleAxleCode(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  shortCountVolumesByVehicleAxleCode(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection
}

# A condition to be used against `NysdotVehicleAxleCodeDescription` object types.
# All fields are tested for equality and combined with a logical ‘and.’
input NysdotVehicleAxleCodeDescriptionCondition {
  # Checks for equality with the object’s `code` field.
  code: NysdotVehicleAxleCode

  # Checks for equality with the object’s `description` field.
  description: String
}

# A connection to a list of `NysdotVehicleAxleCodeDescription` values.
type NysdotVehicleAxleCodeDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NysdotVehicleAxleCodeDescription` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `NysdotVehicleAxleCodeDescription` and cursor to aid in pagination.
  edges: [NysdotVehicleAxleCodeDescriptionsEdge]

  # A list of `NysdotVehicleAxleCodeDescription` objects.
  nodes: [NysdotVehicleAxleCodeDescription!]
}

# A `NysdotVehicleAxleCodeDescription` edge in the connection.
type NysdotVehicleAxleCodeDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NysdotVehicleAxleCodeDescription` at the end of the edge.
  node: NysdotVehicleAxleCodeDescription!
}

# Methods to use when ordering `NysdotVehicleAxleCodeDescription`.
enum NysdotVehicleAxleCodeDescriptionsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  CODE_ASC
  CODE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# The root query type which gives access points into the data universe.
type Query implements Node {
  # Fetches an object given its globally unique `ID`.
  node(
    # The globally unique `ID`.
    nodeId: ID!
  ): Node

  # Reads and enables pagination through a set of `AadtShp`.
  allAadtShps(
    # The method to use when ordering `AadtShp`.
    orderBy: AadtShpsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AadtShpCondition
  ): AadtShpsConnection

  # Reads and enables pagination through a set of `AverageWeekdaySpeed`.
  allAverageWeekdaySpeeds(
    # The method to use when ordering `AverageWeekdaySpeed`.
    orderBy: AverageWeekdaySpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdaySpeedCondition
  ): AverageWeekdaySpeedsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVehicleClassification`.
  allAverageWeekdayVehicleClassifications(
    # The method to use when ordering `AverageWeekdayVehicleClassification`.
    orderBy: AverageWeekdayVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVehicleClassificationCondition
  ): AverageWeekdayVehicleClassificationsConnection

  # Reads and enables pagination through a set of `AverageWeekdayVolume`.
  allAverageWeekdayVolumes(
    # The method to use when ordering `AverageWeekdayVolume`.
    orderBy: AverageWeekdayVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: AverageWeekdayVolumeCondition
  ): AverageWeekdayVolumesConnection

  # Reads and enables pagination through a set of `CalendarMonthName`.
  allCalendarMonthNames(
    # The method to use when ordering `CalendarMonthName`.
    orderBy: CalendarMonthNamesOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: CalendarMonthNameCondition
  ): CalendarMonthNamesConnection

  # Reads a single `CalendarMonthName` using its globally unique `ID`.
  calendarMonthName(
    # The globally unique `ID` to be used in selecting a single `CalendarMonthName`.
    nodeId: ID!
  ): CalendarMonthName
  calendarMonthNameByCalendarMonth(calendarMonth: CalendarMonth!): CalendarMonthName
  calendarMonthNameByCalendarMonthName(calendarMonthName: String!): CalendarMonthName

  # Reads and enables pagination through a set of `ContinuousCountsShp`.
  allContinuousCountsShps(
    # The method to use when ordering `ContinuousCountsShp`.
    orderBy: ContinuousCountsShpsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousCountsShpCondition
  ): ContinuousCountsShpsConnection

  # Reads and enables pagination through a set of `ContinuousVehicleClassification`.
  allContinuousVehicleClassifications(
    # The method to use when ordering `ContinuousVehicleClassification`.
    orderBy: ContinuousVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVehicleClassificationCondition
  ): ContinuousVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ContinuousVolume`.
  allContinuousVolumes(
    # The method to use when ordering `ContinuousVolume`.
    orderBy: ContinuousVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ContinuousVolumeCondition
  ): ContinuousVolumesConnection

  # Reads and enables pagination through a set of `DayOfMonthOrdinal`.
  allDayOfMonthOrdinals(
    # The method to use when ordering `DayOfMonthOrdinal`.
    orderBy: DayOfMonthOrdinalsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: DayOfMonthOrdinalCondition
  ): DayOfMonthOrdinalsConnection

  # Reads a single `DayOfMonthOrdinal` using its globally unique `ID`.
  dayOfMonthOrdinal(
    # The globally unique `ID` to be used in selecting a single `DayOfMonthOrdinal`.
    nodeId: ID!
  ): DayOfMonthOrdinal
  dayOfMonthOrdinalByDayOfMonth(dayOfMonth: DayOfMonth!): DayOfMonthOrdinal
  dayOfMonthOrdinalByDayOfMonthOrdinal(dayOfMonthOrdinal: String!): DayOfMonthOrdinal

  # Reads and enables pagination through a set of `DaysOfWeek`.
  allDaysOfWeeks(
    # The method to use when ordering `DaysOfWeek`.
    orderBy: DaysOfWeeksOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: DaysOfWeekCondition
  ): DaysOfWeeksConnection

  # Reads a single `DaysOfWeek` using its globally unique `ID`.
  daysOfWeek(
    # The globally unique `ID` to be used in selecting a single `DaysOfWeek`.
    nodeId: ID!
  ): DaysOfWeek
  daysOfWeekByDow(dow: DayOfWeekCode!): DaysOfWeek
  daysOfWeekByDayOfWeek(dayOfWeek: DayOfWeek!): DaysOfWeek

  # Reads and enables pagination through a set of `FhwaDirectionOfTravelCodeDescription`.
  allFhwaDirectionOfTravelCodeDescriptions(
    # The method to use when ordering `FhwaDirectionOfTravelCodeDescription`.
    orderBy: FhwaDirectionOfTravelCodeDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: FhwaDirectionOfTravelCodeDescriptionCondition
  ): FhwaDirectionOfTravelCodeDescriptionsConnection

  # Reads a single `FhwaDirectionOfTravelCodeDescription` using its globally unique `ID`.
  fhwaDirectionOfTravelCodeDescription(
    # The globally unique `ID` to be used in selecting a single `FhwaDirectionOfTravelCodeDescription`.
    nodeId: ID!
  ): FhwaDirectionOfTravelCodeDescription
  fhwaDirectionOfTravelCodeDescriptionByCode(code: FhwaDirectionOfTravelCode!): FhwaDirectionOfTravelCodeDescription
  fhwaDirectionOfTravelCodeDescriptionByDescription(description: String!): FhwaDirectionOfTravelCodeDescription

  # Reads and enables pagination through a set of `FhwaFSchemeClassDescription`.
  allFhwaFSchemeClassDescriptions(
    # The method to use when ordering `FhwaFSchemeClassDescription`.
    orderBy: FhwaFSchemeClassDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: FhwaFSchemeClassDescriptionCondition
  ): FhwaFSchemeClassDescriptionsConnection

  # Reads a single `FhwaFSchemeClassDescription` using its globally unique `ID`.
  fhwaFSchemeClassDescription(
    # The globally unique `ID` to be used in selecting a single `FhwaFSchemeClassDescription`.
    nodeId: ID!
  ): FhwaFSchemeClassDescription
  fhwaFSchemeClassDescriptionByClass(class: FhwaFSchemeClass!): FhwaFSchemeClassDescription
  fhwaFSchemeClassDescriptionByShortDescription(shortDescription: String!): FhwaFSchemeClassDescription
  fhwaFSchemeClassDescriptionByLongDescription(longDescription: String!): FhwaFSchemeClassDescription

  # Reads and enables pagination through a set of `HourOfDayRange`.
  allHourOfDayRanges(
    # The method to use when ordering `HourOfDayRange`.
    orderBy: HourOfDayRangesOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: HourOfDayRangeCondition
  ): HourOfDayRangesConnection

  # Reads a single `HourOfDayRange` using its globally unique `ID`.
  hourOfDayRange(
    # The globally unique `ID` to be used in selecting a single `HourOfDayRange`.
    nodeId: ID!
  ): HourOfDayRange
  hourOfDayRangeByHourOfDay(hourOfDay: HourOfDay!): HourOfDayRange
  hourOfDayRangeByTimeOfDayRange(timeOfDayRange: String!): HourOfDayRange

  # Reads and enables pagination through a set of `NysdotDataIntervalDescription`.
  allNysdotDataIntervalDescriptions(
    # The method to use when ordering `NysdotDataIntervalDescription`.
    orderBy: NysdotDataIntervalDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotDataIntervalDescriptionCondition
  ): NysdotDataIntervalDescriptionsConnection

  # Reads a single `NysdotDataIntervalDescription` using its globally unique `ID`.
  nysdotDataIntervalDescription(
    # The globally unique `ID` to be used in selecting a single `NysdotDataIntervalDescription`.
    nodeId: ID!
  ): NysdotDataIntervalDescription
  nysdotDataIntervalDescriptionByDataInterval(
    # NYSDOT data_interval code.
    dataInterval: NysdotDataInterval!
  ): NysdotDataIntervalDescription
  nysdotDataIntervalDescriptionByDataIntervalDescription(
    # NYSDOT data_interval code description.
    dataIntervalDescription: String!
  ): NysdotDataIntervalDescription

  # Reads and enables pagination through a set of `NysdotFunctionalClassificationCodeDescription`.
  allNysdotFunctionalClassificationCodeDescriptions(
    # The method to use when ordering `NysdotFunctionalClassificationCodeDescription`.
    orderBy: NysdotFunctionalClassificationCodeDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotFunctionalClassificationCodeDescriptionCondition
  ): NysdotFunctionalClassificationCodeDescriptionsConnection

  # Reads a single `NysdotFunctionalClassificationCodeDescription` using its globally unique `ID`.
  nysdotFunctionalClassificationCodeDescription(
    # The globally unique `ID` to be used in selecting a single `NysdotFunctionalClassificationCodeDescription`.
    nodeId: ID!
  ): NysdotFunctionalClassificationCodeDescription
  nysdotFunctionalClassificationCodeDescriptionByCode(code: NysdotFunctionalClassificationCode!): NysdotFunctionalClassificationCodeDescription

  # Reads and enables pagination through a set of `NysdotOneWayRoadFlagDescription`.
  allNysdotOneWayRoadFlagDescriptions(
    # The method to use when ordering `NysdotOneWayRoadFlagDescription`.
    orderBy: NysdotOneWayRoadFlagDescriptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotOneWayRoadFlagDescriptionCondition
  ): NysdotOneWayRoadFlagDescriptionsConnection
  nysdotOneWayRoadFlagDescriptionByFlagValue(flagValue: NysdotOneWayRoadFlag!): NysdotOneWayRoadFlagDescription
  nysdotOneWayRoadFlagDescriptionByDescription(description: String!): NysdotOneWayRoadFlagDescription

  # Reads and enables pagination through a set of `NysdotRegionName`.
  allNysdotRegionNames(
    # The method to use when ordering `NysdotRegionName`.
    orderBy: NysdotRegionNamesOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotRegionNameCondition
  ): NysdotRegionNamesConnection

  # Reads a single `NysdotRegionName` using its globally unique `ID`.
  nysdotRegionName(
    # The globally unique `ID` to be used in selecting a single `NysdotRegionName`.
    nodeId: ID!
  ): NysdotRegionName
  nysdotRegionNameByRegion(
    # The Region Number, a number 1-11 representing a NYSDOT Region.
    region: NysdotRegion!
  ): NysdotRegionName
  nysdotRegionNameByName(
    # Name of the NYSDOT Region.
    name: String!
  ): NysdotRegionName

  # Reads and enables pagination through a set of `NysdotRoadDirectionCodeDescription`.
  allNysdotRoadDirectionCodeDescriptions(
    # The method to use when ordering `NysdotRoadDirectionCodeDescription`.
    orderBy: NysdotRoadDirectionCodeDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotRoadDirectionCodeDescriptionCondition
  ): NysdotRoadDirectionCodeDescriptionsConnection

  # Reads a single `NysdotRoadDirectionCodeDescription` using its globally unique `ID`.
  nysdotRoadDirectionCodeDescription(
    # The globally unique `ID` to be used in selecting a single `NysdotRoadDirectionCodeDescription`.
    nodeId: ID!
  ): NysdotRoadDirectionCodeDescription
  nysdotRoadDirectionCodeDescriptionByCode(code: NysdotRoadDirectionCode!): NysdotRoadDirectionCodeDescription
  nysdotRoadDirectionCodeDescriptionByDescription(description: String!): NysdotRoadDirectionCodeDescription

  # Reads and enables pagination through a set of `NysdotSeasonalAdjustmentFactorGroupDescription`.
  allNysdotSeasonalAdjustmentFactorGroupDescriptions(
    # The method to use when ordering `NysdotSeasonalAdjustmentFactorGroupDescription`.
    orderBy: NysdotSeasonalAdjustmentFactorGroupDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotSeasonalAdjustmentFactorGroupDescriptionCondition
  ): NysdotSeasonalAdjustmentFactorGroupDescriptionsConnection

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` using its globally unique `ID`.
  nysdotSeasonalAdjustmentFactorGroupDescription(
    # The globally unique `ID` to be used in selecting a single `NysdotSeasonalAdjustmentFactorGroupDescription`.
    nodeId: ID!
  ): NysdotSeasonalAdjustmentFactorGroupDescription
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup(factorGroup: NysdotSeasonalAdjustmentFactorGroup!): NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads and enables pagination through a set of `NysdotVehicleAxleCodeDescription`.
  allNysdotVehicleAxleCodeDescriptions(
    # The method to use when ordering `NysdotVehicleAxleCodeDescription`.
    orderBy: NysdotVehicleAxleCodeDescriptionsOrderBy = PRIMARY_KEY_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: NysdotVehicleAxleCodeDescriptionCondition
  ): NysdotVehicleAxleCodeDescriptionsConnection

  # Reads a single `NysdotVehicleAxleCodeDescription` using its globally unique `ID`.
  nysdotVehicleAxleCodeDescription(
    # The globally unique `ID` to be used in selecting a single `NysdotVehicleAxleCodeDescription`.
    nodeId: ID!
  ): NysdotVehicleAxleCodeDescription
  nysdotVehicleAxleCodeDescriptionByCode(code: NysdotVehicleAxleCode!): NysdotVehicleAxleCodeDescription
  nysdotVehicleAxleCodeDescriptionByDescription(description: String!): NysdotVehicleAxleCodeDescription

  # Reads and enables pagination through a set of `ShortCountSpeed`.
  allShortCountSpeeds(
    # The method to use when ordering `ShortCountSpeed`.
    orderBy: ShortCountSpeedsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountSpeedCondition
  ): ShortCountSpeedsConnection

  # Reads and enables pagination through a set of `ShortCountVehicleClassification`.
  allShortCountVehicleClassifications(
    # The method to use when ordering `ShortCountVehicleClassification`.
    orderBy: ShortCountVehicleClassificationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVehicleClassificationCondition
  ): ShortCountVehicleClassificationsConnection

  # Reads and enables pagination through a set of `ShortCountVolume`.
  allShortCountVolumes(
    # The method to use when ordering `ShortCountVolume`.
    orderBy: ShortCountVolumesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountVolumeCondition
  ): ShortCountVolumesConnection

  # Reads and enables pagination through a set of `ShortCountsShp`.
  allShortCountsShps(
    # The method to use when ordering `ShortCountsShp`.
    orderBy: ShortCountsShpsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: ShortCountsShpCondition
  ): ShortCountsShpsConnection

  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!

  # The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  nodeId: ID!
}

# Fifteen Minute short count speed data by direction for a given Region and Year.
type ShortCountSpeed {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: Int

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: Int

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: Int

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # A description of the data type contained in the file.
  dataType: String

  # Speed_Limit for the count location in speed data files.
  speedLimit: Int

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # Where applicable, the day of the month on which the data was collected.
  day: DayOfMonth

  # The day of week the data was collected.
  dayOfWeek: DayOfWeek

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # The lane code by direction, starting with 1 as the rightmost lane.
  laneCode: Int

  # The total number of lanes expected in this direction.
  lanesInDirection: Int

  # The interval, in minutes, in which the data was collected, typically 15 or 60.
  collectionInterval: Int

  # Speed and Classification data only. The interval which the record applies. 1.1
  # indicates the first 15 minutes of the first hour of the day, or 00:00 through
  # 00:15. 1.2 represents 00:15‐00:30, 12.3 represents 11:30‐11:45, 23.4
  # represents 22:45‐23:00 and so on.
  dataInterval: NysdotDataInterval

  # The number of vehicles in speed bin 1 (00-20.0 mph) for the interval represented.
  bin1: Int

  # The number of vehicles in speed bin 2 (20.1-25.0 mph) for the interval represented.
  bin2: Int

  # The number of vehicles in speed bin 3 (25.1-30.0 mph) for the interval represented.
  bin3: Int

  # The number of vehicles in speed bin 4 (30.1-35.0 mph) for the interval represented.
  bin4: Int

  # The number of vehicles in speed bin 5 (35.1-40.0 mph) for the interval represented.
  bin5: Int

  # The number of vehicles in speed bin 6 (40.1-45.0 mph) for the interval represented.
  bin6: Int

  # The number of vehicles in speed bin 7 (45.1-50.0 mph) for the interval represented.
  bin7: Int

  # The number of vehicles in speed bin 8 (50.1-55.0 mph) for the interval represented.
  bin8: Int

  # The number of vehicles in speed bin 9 (55.1-60.0 mph) for the interval represented.
  bin9: Int

  # The number of vehicles in speed bin (60.1-65.0 mph) for the interval represented.
  bin10: Int

  # The number of vehicles in speed bin 11 (65.1-70.0 mph) for the interval represented.
  bin11: Int

  # The number of vehicles in speed bin 12 (70.1-75.0 mph) for the interval represented.
  bin12: Int

  # The number of vehicles in speed bin 13 (75.1-80.0 mph) for the interval represented.
  bin13: Int

  # The number of vehicles in speed bin 14 (80.1-85.0 mph) for the interval represented.
  bin14: Int

  # The number of vehicles in speed bin 15 (>85.0 mph ) for the interval represented.
  bin15: Int

  # Speed and Classification only. Number of vehicles a counter was unable to
  # correctly place in a bin. Currently blank, as not part of NYSDOT format at this time.
  unclassified: Int

  # The sum of all bins or intervals for the record.
  total: Int

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `ShortCountSpeed`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is related to this `ShortCountSpeed`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `CalendarMonthName` that is related to this `ShortCountSpeed`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `ShortCountSpeed`.
  dayOfMonthOrdinalByDay: DayOfMonthOrdinal

  # Reads a single `DaysOfWeek` that is related to this `ShortCountSpeed`.
  daysOfWeekByDayOfWeek: DaysOfWeek

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `ShortCountSpeed`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription

  # Reads a single `NysdotDataIntervalDescription` that is related to this `ShortCountSpeed`.
  nysdotDataIntervalDescriptionByDataInterval: NysdotDataIntervalDescription
}

# A condition to be used against `ShortCountSpeed` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input ShortCountSpeedCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: Int

  # Checks for equality with the object’s `regionCode` field.
  regionCode: Int

  # Checks for equality with the object’s `countyCode` field.
  countyCode: Int

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `speedLimit` field.
  speedLimit: Int

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `day` field.
  day: DayOfMonth

  # Checks for equality with the object’s `dayOfWeek` field.
  dayOfWeek: DayOfWeek

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `laneCode` field.
  laneCode: Int

  # Checks for equality with the object’s `lanesInDirection` field.
  lanesInDirection: Int

  # Checks for equality with the object’s `collectionInterval` field.
  collectionInterval: Int

  # Checks for equality with the object’s `dataInterval` field.
  dataInterval: NysdotDataInterval

  # Checks for equality with the object’s `bin1` field.
  bin1: Int

  # Checks for equality with the object’s `bin2` field.
  bin2: Int

  # Checks for equality with the object’s `bin3` field.
  bin3: Int

  # Checks for equality with the object’s `bin4` field.
  bin4: Int

  # Checks for equality with the object’s `bin5` field.
  bin5: Int

  # Checks for equality with the object’s `bin6` field.
  bin6: Int

  # Checks for equality with the object’s `bin7` field.
  bin7: Int

  # Checks for equality with the object’s `bin8` field.
  bin8: Int

  # Checks for equality with the object’s `bin9` field.
  bin9: Int

  # Checks for equality with the object’s `bin10` field.
  bin10: Int

  # Checks for equality with the object’s `bin11` field.
  bin11: Int

  # Checks for equality with the object’s `bin12` field.
  bin12: Int

  # Checks for equality with the object’s `bin13` field.
  bin13: Int

  # Checks for equality with the object’s `bin14` field.
  bin14: Int

  # Checks for equality with the object’s `bin15` field.
  bin15: Int

  # Checks for equality with the object’s `unclassified` field.
  unclassified: Int

  # Checks for equality with the object’s `total` field.
  total: Int

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `ShortCountSpeed` values.
type ShortCountSpeedsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ShortCountSpeed` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ShortCountSpeed` and cursor to aid in pagination.
  edges: [ShortCountSpeedsEdge]

  # A list of `ShortCountSpeed` objects.
  nodes: [ShortCountSpeed!]
}

# A `ShortCountSpeed` edge in the connection.
type ShortCountSpeedsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ShortCountSpeed` at the end of the edge.
  node: ShortCountSpeed!
}

# Methods to use when ordering `ShortCountSpeed`.
enum ShortCountSpeedsOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  SPEED_LIMIT_ASC
  SPEED_LIMIT_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_ASC
  DAY_DESC
  DAY_OF_WEEK_ASC
  DAY_OF_WEEK_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  LANE_CODE_ASC
  LANE_CODE_DESC
  LANES_IN_DIRECTION_ASC
  LANES_IN_DIRECTION_DESC
  COLLECTION_INTERVAL_ASC
  COLLECTION_INTERVAL_DESC
  DATA_INTERVAL_ASC
  DATA_INTERVAL_DESC
  BIN_1_ASC
  BIN_1_DESC
  BIN_2_ASC
  BIN_2_DESC
  BIN_3_ASC
  BIN_3_DESC
  BIN_4_ASC
  BIN_4_DESC
  BIN_5_ASC
  BIN_5_DESC
  BIN_6_ASC
  BIN_6_DESC
  BIN_7_ASC
  BIN_7_DESC
  BIN_8_ASC
  BIN_8_DESC
  BIN_9_ASC
  BIN_9_DESC
  BIN_10_ASC
  BIN_10_DESC
  BIN_11_ASC
  BIN_11_DESC
  BIN_12_ASC
  BIN_12_DESC
  BIN_13_ASC
  BIN_13_DESC
  BIN_14_ASC
  BIN_14_DESC
  BIN_15_ASC
  BIN_15_DESC
  UNCLASSIFIED_ASC
  UNCLASSIFIED_DESC
  TOTAL_ASC
  TOTAL_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}

type ShortCountsShp {
  ogcFid: Int!
  rcId: String
  countYr: Float
  latitude: Float
  longitude: Float
  tdvRoute: String
  roadwaytyp: String
  begindesc: String
  enddesc: String
  muni: String
  dataType: String
  countAadt: Float
  currentAa: Float
  currentTy: String
  currentYr: Float
  volTxt: String
  classTxt: String
  speedTxt: String
  volTdv: String
  classTdv: String
  speedTdv: String
  wkbGeometry: String
}

# A condition to be used against `ShortCountsShp` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input ShortCountsShpCondition {
  # Checks for equality with the object’s `ogcFid` field.
  ogcFid: Int

  # Checks for equality with the object’s `rcId` field.
  rcId: String

  # Checks for equality with the object’s `countYr` field.
  countYr: Float

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `tdvRoute` field.
  tdvRoute: String

  # Checks for equality with the object’s `roadwaytyp` field.
  roadwaytyp: String

  # Checks for equality with the object’s `begindesc` field.
  begindesc: String

  # Checks for equality with the object’s `enddesc` field.
  enddesc: String

  # Checks for equality with the object’s `muni` field.
  muni: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `countAadt` field.
  countAadt: Float

  # Checks for equality with the object’s `currentAa` field.
  currentAa: Float

  # Checks for equality with the object’s `currentTy` field.
  currentTy: String

  # Checks for equality with the object’s `currentYr` field.
  currentYr: Float

  # Checks for equality with the object’s `volTxt` field.
  volTxt: String

  # Checks for equality with the object’s `classTxt` field.
  classTxt: String

  # Checks for equality with the object’s `speedTxt` field.
  speedTxt: String

  # Checks for equality with the object’s `volTdv` field.
  volTdv: String

  # Checks for equality with the object’s `classTdv` field.
  classTdv: String

  # Checks for equality with the object’s `speedTdv` field.
  speedTdv: String

  # Checks for equality with the object’s `wkbGeometry` field.
  wkbGeometry: String
}

# A connection to a list of `ShortCountsShp` values.
type ShortCountsShpsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ShortCountsShp` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ShortCountsShp` and cursor to aid in pagination.
  edges: [ShortCountsShpsEdge]

  # A list of `ShortCountsShp` objects.
  nodes: [ShortCountsShp!]
}

# A `ShortCountsShp` edge in the connection.
type ShortCountsShpsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ShortCountsShp` at the end of the edge.
  node: ShortCountsShp!
}

# Methods to use when ordering `ShortCountsShp`.
enum ShortCountsShpsOrderBy {
  NATURAL
  OGC_FID_ASC
  OGC_FID_DESC
  RC_ID_ASC
  RC_ID_DESC
  COUNT_YR_ASC
  COUNT_YR_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  TDV_ROUTE_ASC
  TDV_ROUTE_DESC
  ROADWAYTYP_ASC
  ROADWAYTYP_DESC
  BEGINDESC_ASC
  BEGINDESC_DESC
  ENDDESC_ASC
  ENDDESC_DESC
  MUNI_ASC
  MUNI_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  COUNT_AADT_ASC
  COUNT_AADT_DESC
  CURRENT_AA_ASC
  CURRENT_AA_DESC
  CURRENT_TY_ASC
  CURRENT_TY_DESC
  CURRENT_YR_ASC
  CURRENT_YR_DESC
  VOL_TXT_ASC
  VOL_TXT_DESC
  CLASS_TXT_ASC
  CLASS_TXT_DESC
  SPEED_TXT_ASC
  SPEED_TXT_DESC
  VOL_TDV_ASC
  VOL_TDV_DESC
  CLASS_TDV_ASC
  CLASS_TDV_DESC
  SPEED_TDV_ASC
  SPEED_TDV_DESC
  WKB_GEOMETRY_ASC
  WKB_GEOMETRY_DESC
}

# Fifteen Minute short count speed data by direction for a given Region and Year.
type ShortCountVehicleClassification {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: Int

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: Int

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: Int

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # Currently blank. Represents the number of unclassified vehicles for the interval represented.
  dataType: String

  # Speed_Limit for the count location in speed data files.
  blank: String

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # Where applicable, the day of the month on which the data was collected.
  day: DayOfMonth

  # The day of week the data was collected.
  dayOfWeek: DayOfWeek

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # The lane code by direction, starting with 1 as the rightmost lane.
  laneCode: Int

  # The total number of lanes expected in this direction.
  lanesInDirection: Int

  # The interval, in minutes, in which the data was collected, typically 15 or 60.
  collectionInterval: Int

  # Speed and Classification data only. The interval which the record applies. 1.1
  # indicates the first 15 minutes of the first hour of the day, or 00:00 through
  # 00:15. 1.2 represents 00:15‐00:30, 12.3 represents 11:30‐11:45, 23.4
  # represents 22:45‐23:00 and so on.
  dataInterval: NysdotDataInterval

  # The number of vehicles in the FHWA F‐scheme class F1 (Motorcycles) for the interval represented.
  classF1: Int

  # The number of vehicles in the FHWA F‐scheme class F2 (Autos) for the interval represented.
  classF2: Int

  # The number of vehicles in the FHWA F‐scheme class F3 (2 axle, 4‐tire pickups,
  # vans, motor‐homes) for the interval represented.
  classF3: Int

  # The number of vehicles in the FHWA F‐scheme class F4 (Buses) for the interval represented.
  classF4: Int

  # The number of vehicles in the FHWA F‐scheme class F5 (2 axle, 6‐tire single unit trucks) for the interval represented.
  classF5: Int

  # The number of vehicles in the FHWA F‐scheme class F6 (3 axle single unit trucks) for the interval represented.
  classF6: Int

  # The number of vehicles in the FHWA F‐scheme class F7 (4 or more axle single unit trucks) for the interval represented.
  classF7: Int

  # The number of vehicles in the FHWA F‐scheme class F8 (4 or less axle vehicles,
  # single trailer) for the interval represented.
  classF8: Int

  # The number of vehicles in the FHWA F‐scheme class F9 (5 axle, single trailer) for the interval represented.
  classF9: Int

  # The number of vehicles in the FHWA F‐scheme class F10 (6 or more axle, single trailer) for the interval represented.
  classF10: Int

  # The number of vehicles in the FHWA F‐scheme class F11 (5 axle multi‐trailer trucks) for the interval represented.
  classF11: Int

  # The number of vehicles in the FHWA F‐scheme class F12 (6 axle multi‐trailer trucks) for the interval represented.
  classF12: Int

  # The number of vehicles in the FHWA F‐scheme class F13 (7 or more axle multi‐trailer trucks) for the interval represented.
  classF13: Int

  # Speed and Classification only. Number of vehicles a counter was unable to
  # correctly place in a bin. Currently blank, as not part of NYSDOT format at this time.
  unclassified: Int

  # The sum of all bins or intervals for the record.
  total: Int

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `ShortCountVehicleClassification`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is related to this `ShortCountVehicleClassification`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `CalendarMonthName` that is related to this `ShortCountVehicleClassification`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `ShortCountVehicleClassification`.
  dayOfMonthOrdinalByDay: DayOfMonthOrdinal

  # Reads a single `DaysOfWeek` that is related to this `ShortCountVehicleClassification`.
  daysOfWeekByDayOfWeek: DaysOfWeek

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `ShortCountVehicleClassification`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription

  # Reads a single `NysdotDataIntervalDescription` that is related to this `ShortCountVehicleClassification`.
  nysdotDataIntervalDescriptionByDataInterval: NysdotDataIntervalDescription
}

# A condition to be used against `ShortCountVehicleClassification` object types.
# All fields are tested for equality and combined with a logical ‘and.’
input ShortCountVehicleClassificationCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: Int

  # Checks for equality with the object’s `regionCode` field.
  regionCode: Int

  # Checks for equality with the object’s `countyCode` field.
  countyCode: Int

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `blank` field.
  blank: String

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `day` field.
  day: DayOfMonth

  # Checks for equality with the object’s `dayOfWeek` field.
  dayOfWeek: DayOfWeek

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `laneCode` field.
  laneCode: Int

  # Checks for equality with the object’s `lanesInDirection` field.
  lanesInDirection: Int

  # Checks for equality with the object’s `collectionInterval` field.
  collectionInterval: Int

  # Checks for equality with the object’s `dataInterval` field.
  dataInterval: NysdotDataInterval

  # Checks for equality with the object’s `classF1` field.
  classF1: Int

  # Checks for equality with the object’s `classF2` field.
  classF2: Int

  # Checks for equality with the object’s `classF3` field.
  classF3: Int

  # Checks for equality with the object’s `classF4` field.
  classF4: Int

  # Checks for equality with the object’s `classF5` field.
  classF5: Int

  # Checks for equality with the object’s `classF6` field.
  classF6: Int

  # Checks for equality with the object’s `classF7` field.
  classF7: Int

  # Checks for equality with the object’s `classF8` field.
  classF8: Int

  # Checks for equality with the object’s `classF9` field.
  classF9: Int

  # Checks for equality with the object’s `classF10` field.
  classF10: Int

  # Checks for equality with the object’s `classF11` field.
  classF11: Int

  # Checks for equality with the object’s `classF12` field.
  classF12: Int

  # Checks for equality with the object’s `classF13` field.
  classF13: Int

  # Checks for equality with the object’s `unclassified` field.
  unclassified: Int

  # Checks for equality with the object’s `total` field.
  total: Int

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `ShortCountVehicleClassification` values.
type ShortCountVehicleClassificationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ShortCountVehicleClassification` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ShortCountVehicleClassification` and cursor to aid in pagination.
  edges: [ShortCountVehicleClassificationsEdge]

  # A list of `ShortCountVehicleClassification` objects.
  nodes: [ShortCountVehicleClassification!]
}

# A `ShortCountVehicleClassification` edge in the connection.
type ShortCountVehicleClassificationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ShortCountVehicleClassification` at the end of the edge.
  node: ShortCountVehicleClassification!
}

# Methods to use when ordering `ShortCountVehicleClassification`.
enum ShortCountVehicleClassificationsOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  BLANK_ASC
  BLANK_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_ASC
  DAY_DESC
  DAY_OF_WEEK_ASC
  DAY_OF_WEEK_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  LANE_CODE_ASC
  LANE_CODE_DESC
  LANES_IN_DIRECTION_ASC
  LANES_IN_DIRECTION_DESC
  COLLECTION_INTERVAL_ASC
  COLLECTION_INTERVAL_DESC
  DATA_INTERVAL_ASC
  DATA_INTERVAL_DESC
  CLASS_F1_ASC
  CLASS_F1_DESC
  CLASS_F2_ASC
  CLASS_F2_DESC
  CLASS_F3_ASC
  CLASS_F3_DESC
  CLASS_F4_ASC
  CLASS_F4_DESC
  CLASS_F5_ASC
  CLASS_F5_DESC
  CLASS_F6_ASC
  CLASS_F6_DESC
  CLASS_F7_ASC
  CLASS_F7_DESC
  CLASS_F8_ASC
  CLASS_F8_DESC
  CLASS_F9_ASC
  CLASS_F9_DESC
  CLASS_F10_ASC
  CLASS_F10_DESC
  CLASS_F11_ASC
  CLASS_F11_DESC
  CLASS_F12_ASC
  CLASS_F12_DESC
  CLASS_F13_ASC
  CLASS_F13_DESC
  UNCLASSIFIED_ASC
  UNCLASSIFIED_DESC
  TOTAL_ASC
  TOTAL_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}

# Fifteen Minute short count speed data by direction for a given Region and Year.
type ShortCountVolume {
  # Region‐County‐Station number, a seven character code uniquely identifying a
  # traffic segment in NYS. Can be used to join data to shapefiles published by NYSDOT.
  rcStation: String

  # A unique ID for each count session loaded, each count has one Count_ID for all data types.
  countId: String

  # Region Number, a number 1‐11 representing the NYSDOT Region in which the count station is located.
  rg: Int

  # A single digit code for each NYSDOT Region. Can be concatenated with County_Code and Station number to create a unique ID.
  regionCode: Int

  # A single digit code for each County within a NYSDOT Region. Can be
  # concatenated with Region_Code and Station number to create a unique ID.
  countyCode: Int

  # Station Number, a four digit number unique within a county representing a
  # specific segment of road for traffic counting purposes. Can be concatenated
  # with Region_Code and County_Code to create a unique ID. Typically formatted as
  # text to retain leading zeroes.
  stat: String

  # Region_Code, County_Code, and Station Number concatenated into a 6 digit
  # unique ID. Typically formatted as text to retain leading zeroes.
  rcsta: String

  # Functional Classification of the roadway segment to which the station applies.
  functionalClass: NysdotFunctionalClassificationCode

  # Factor Group determines the set of seasonal factors to apply. Factor Groups are 30, 40, or 60 only.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Latitude, in decimal degrees, of the primary counter placement.
  latitude: Float

  # Longitude, in decimal degrees, of the primary counter placement.
  longitude: Float

  # Verbal description of the primary counter placement.
  specificRecorderPlacement: String

  # Any notes from the count collector, or processor, related to the count. The
  # four digit Continuous Counter ID (CCID) is entered when the record is based on
  # Continuous Data.
  channelNotes: String

  # A description of the data type contained in the file.
  dataType: String

  # Vehicle/Axle code in Volume files: 1=Vehicle count 2=Axles/2 count.
  vehicleAxleCode: NysdotVehicleAxleCode

  # The year in which the data was collected.
  year: CalendarYear

  # The month in which the data was collected.
  month: CalendarMonth

  # Where applicable, the day of the month on which the data was collected.
  day: DayOfMonth

  # The day of week the data was collected.
  dayOfWeek: DayOfWeek

  # The federal direction code for the data record. 1 – North, 3 – East, 5 –
  # South, 7 – West, 9 – North/South Combined, 0 – East/West combined.   NOTED
  # ERROR: Many North/South records are incorrectly labeled with a 0 code. Data
  # remains correct.
  federalDirection: FhwaDirectionOfTravelCode

  # The lane code by direction, starting with 1 as the rightmost lane.
  laneCode: Int

  # The total number of lanes expected in this direction.
  lanesInDirection: Int

  # The interval, in minutes, in which the data was collected, typically 15 or 60.
  collectionInterval: Int

  # Volume Data for the 15 minute interval 00:00 through 00:15
  interval11: Int

  # Volume Data for the 15 minute interval 00:15 through 00:30
  interval12: Int

  # Volume Data for the 15 minute interval 00:30 through 00:45
  interval13: Int

  # Volume Data for the 15 minute interval 00:45 through 01:00
  interval14: Int

  # Volume Data for the 15 minute interval 01:00 through 01:15
  interval21: Int

  # Volume Data for the 15 minute interval 01:15 through 01:30
  interval22: Int

  # Volume Data for the 15 minute interval 01:30 through 01:45
  interval23: Int

  # Volume Data for the 15 minute interval 01:45 through 02:00
  interval24: Int

  # Volume Data for the 15 minute interval 02:00 through 02:15
  interval31: Int

  # Volume Data for the 15 minute interval 02:15 through 02:30
  interval32: Int

  # Volume Data for the 15 minute interval 02:30 through 02:45
  interval33: Int

  # Volume Data for the 15 minute interval 02:45 through 03:00
  interval34: Int

  # Volume Data for the 15 minute interval 03:00 through 03:15
  interval41: Int

  # Volume Data for the 15 minute interval 03:15 through 03:30
  interval42: Int

  # Volume Data for the 15 minute interval 03:30 through 03:45
  interval43: Int

  # Volume Data for the 15 minute interval 03:45 through 04:00
  interval44: Int

  # Volume Data for the 15 minute interval 04:00 through 04:15
  interval51: Int

  # Volume Data for the 15 minute interval 04:15 through 04:30
  interval52: Int

  # Volume Data for the 15 minute interval 04:30 through 04:45
  interval53: Int

  # Volume Data for the 15 minute interval 04:45 through 05:00
  interval54: Int

  # Volume Data for the 15 minute interval 05:00 through 05:15
  interval61: Int

  # Volume Data for the 15 minute interval 05:15 through 05:30
  interval62: Int

  # Volume Data for the 15 minute interval 05:30 through 05:45
  interval63: Int

  # Volume Data for the 15 minute interval 05:45 through 06:00
  interval64: Int

  # Volume Data for the 15 minute interval 06:00 through 06:15
  interval71: Int

  # Volume Data for the 15 minute interval 06:15 through 06:30
  interval72: Int

  # Volume Data for the 15 minute interval 06:30 through 06:45
  interval73: Int

  # Volume Data for the 15 minute interval 06:45 through 07:00
  interval74: Int

  # Volume Data for the 15 minute interval 07:00 through 07:15
  interval81: Int

  # Volume Data for the 15 minute interval 07:15 through 07:30
  interval82: Int

  # Volume Data for the 15 minute interval 07:30 through 07:45
  interval83: Int

  # Volume Data for the 15 minute interval 07:45 through 08:00
  interval84: Int

  # Volume Data for the 15 minute interval 08:00 through 08:15
  interval91: Int

  # Volume Data for the 15 minute interval 08:15 through 08:30
  interval92: Int

  # Volume Data for the 15 minute interval 08:30 through 08:45
  interval93: Int

  # Volume Data for the 15 minute interval 08:45 through 09:00
  interval94: Int

  # Volume Data for the 15 minute interval 09:00 through 09:15
  interval101: Int

  # Volume Data for the 15 minute interval 09:15 through 09:30
  interval102: Int

  # Volume Data for the 15 minute interval 09:30 through 09:45
  interval103: Int

  # Volume Data for the 15 minute interval 09:45 through 10:00
  interval104: Int

  # Volume Data for the 15 minute interval 10:00 through 10:15
  interval111: Int

  # Volume Data for the 15 minute interval 10:15 through 10:30
  interval112: Int

  # Volume Data for the 15 minute interval 10:30 through 10:45
  interval113: Int

  # Volume Data for the 15 minute interval 10:45 through 11:00
  interval114: Int

  # Volume Data for the 15 minute interval 11:00 through 11:15
  interval121: Int

  # Volume Data for the 15 minute interval 11:15 through 11:30
  interval122: Int

  # Volume Data for the 15 minute interval 11:30 through 11:45
  interval123: Int

  # Volume Data for the 15 minute interval 11:45 through 12:00
  interval124: Int

  # Volume Data for the 15 minute interval 12:00 through 12:15
  interval131: Int

  # Volume Data for the 15 minute interval 12:15 through 12:30
  interval132: Int

  # Volume Data for the 15 minute interval 12:30 through 12:45
  interval133: Int

  # Volume Data for the 15 minute interval 12:45 through 13:00
  interval134: Int

  # Volume Data for the 15 minute interval 13:00 through 13:15
  interval141: Int

  # Volume Data for the 15 minute interval 13:15 through 13:30
  interval142: Int

  # Volume Data for the 15 minute interval 13:30 through 13:45
  interval143: Int

  # Volume Data for the 15 minute interval 13:45 through 14:00
  interval144: Int

  # Volume Data for the 15 minute interval 14:00 through 14:15
  interval151: Int

  # Volume Data for the 15 minute interval 14:15 through 14:30
  interval152: Int

  # Volume Data for the 15 minute interval 14:30 through 14:45
  interval153: Int

  # Volume Data for the 15 minute interval 14:45 through 15:00
  interval154: Int

  # Volume Data for the 15 minute interval 15:00 through 15:15
  interval161: Int

  # Volume Data for the 15 minute interval 15:15 through 15:30
  interval162: Int

  # Volume Data for the 15 minute interval 15:30 through 15:45
  interval163: Int

  # Volume Data for the 15 minute interval 15:45 through 16:00
  interval164: Int

  # Volume Data for the 15 minute interval 16:00 through 16:15
  interval171: Int

  # Volume Data for the 15 minute interval 16:15 through 16:30
  interval172: Int

  # Volume Data for the 15 minute interval 16:30 through 16:45
  interval173: Int

  # Volume Data for the 15 minute interval 16:45 through 17:00
  interval174: Int

  # Volume Data for the 15 minute interval 17:00 through 17:15
  interval181: Int

  # Volume Data for the 15 minute interval 17:15 through 17:30
  interval182: Int

  # Volume Data for the 15 minute interval 17:30 through 17:45
  interval183: Int

  # Volume Data for the 15 minute interval 17:45 through 18:00
  interval184: Int

  # Volume Data for the 15 minute interval 18:00 through 18:15
  interval191: Int

  # Volume Data for the 15 minute interval 18:15 through 18:30
  interval192: Int

  # Volume Data for the 15 minute interval 18:30 through 18:45
  interval193: Int

  # Volume Data for the 15 minute interval 18:45 through 19:00
  interval194: Int

  # Volume Data for the 15 minute interval 19:00 through 19:15
  interval201: Int

  # Volume Data for the 15 minute interval 19:15 through 19:30
  interval202: Int

  # Volume Data for the 15 minute interval 19:30 through 19:45
  interval203: Int

  # Volume Data for the 15 minute interval 19:45 through 20:00
  interval204: Int

  # Volume Data for the 15 minute interval 10:00 through 10:15
  interval211: Int

  # Volume Data for the 15 minute interval 20:15 through 20:30
  interval212: Int

  # Volume Data for the 15 minute interval 20:30 through 20:45
  interval213: Int

  # Volume Data for the 15 minute interval 20:45 through 21:00
  interval214: Int

  # Volume Data for the 15 minute interval 21:00 through 21:15
  interval221: Int

  # Volume Data for the 15 minute interval 21:15 through 21:30
  interval222: Int

  # Volume Data for the 15 minute interval 21:30 through 21:45
  interval223: Int

  # Volume Data for the 15 minute interval 21:45 through 22:00
  interval224: Int

  # Volume Data for the 15 minute interval 22:00 through 22:15
  interval231: Int

  # Volume Data for the 15 minute interval 22:15 through 22:30
  interval232: Int

  # Volume Data for the 15 minute interval 22:30 through 22:45
  interval233: Int

  # Volume Data for the 15 minute interval 22:45 through 23:00
  interval234: Int

  # Volume Data for the 15 minute interval 23:00 through 23:15
  interval241: Int

  # Volume Data for the 15 minute interval 23:15 through 23:30
  interval242: Int

  # Volume Data for the 15 minute interval 23:30 through 23:45
  interval243: Int

  # Volume Data for the 15 minute interval 23:45 through 24:00
  interval244: Int

  # The sum of all bins or intervals for the record.
  total: Int

  # A field designated to give additional information about a count.
  flagField: String

  # A system code related to data importing.
  batchId: String

  # Reads a single `NysdotFunctionalClassificationCodeDescription` that is related to this `ShortCountVolume`.
  nysdotFunctionalClassificationCodeDescriptionByFunctionalClass: NysdotFunctionalClassificationCodeDescription

  # Reads a single `NysdotSeasonalAdjustmentFactorGroupDescription` that is related to this `ShortCountVolume`.
  nysdotSeasonalAdjustmentFactorGroupDescriptionByFactorGroup: NysdotSeasonalAdjustmentFactorGroupDescription

  # Reads a single `NysdotVehicleAxleCodeDescription` that is related to this `ShortCountVolume`.
  nysdotVehicleAxleCodeDescriptionByVehicleAxleCode: NysdotVehicleAxleCodeDescription

  # Reads a single `CalendarMonthName` that is related to this `ShortCountVolume`.
  calendarMonthNameByMonth: CalendarMonthName

  # Reads a single `DayOfMonthOrdinal` that is related to this `ShortCountVolume`.
  dayOfMonthOrdinalByDay: DayOfMonthOrdinal

  # Reads a single `DaysOfWeek` that is related to this `ShortCountVolume`.
  daysOfWeekByDayOfWeek: DaysOfWeek

  # Reads a single `FhwaDirectionOfTravelCodeDescription` that is related to this `ShortCountVolume`.
  fhwaDirectionOfTravelCodeDescriptionByFederalDirection: FhwaDirectionOfTravelCodeDescription
}

# A condition to be used against `ShortCountVolume` object types. All fields are
# tested for equality and combined with a logical ‘and.’
input ShortCountVolumeCondition {
  # Checks for equality with the object’s `rcStation` field.
  rcStation: String

  # Checks for equality with the object’s `countId` field.
  countId: String

  # Checks for equality with the object’s `rg` field.
  rg: Int

  # Checks for equality with the object’s `regionCode` field.
  regionCode: Int

  # Checks for equality with the object’s `countyCode` field.
  countyCode: Int

  # Checks for equality with the object’s `stat` field.
  stat: String

  # Checks for equality with the object’s `rcsta` field.
  rcsta: String

  # Checks for equality with the object’s `functionalClass` field.
  functionalClass: NysdotFunctionalClassificationCode

  # Checks for equality with the object’s `factorGroup` field.
  factorGroup: NysdotSeasonalAdjustmentFactorGroup

  # Checks for equality with the object’s `latitude` field.
  latitude: Float

  # Checks for equality with the object’s `longitude` field.
  longitude: Float

  # Checks for equality with the object’s `specificRecorderPlacement` field.
  specificRecorderPlacement: String

  # Checks for equality with the object’s `channelNotes` field.
  channelNotes: String

  # Checks for equality with the object’s `dataType` field.
  dataType: String

  # Checks for equality with the object’s `vehicleAxleCode` field.
  vehicleAxleCode: NysdotVehicleAxleCode

  # Checks for equality with the object’s `year` field.
  year: CalendarYear

  # Checks for equality with the object’s `month` field.
  month: CalendarMonth

  # Checks for equality with the object’s `day` field.
  day: DayOfMonth

  # Checks for equality with the object’s `dayOfWeek` field.
  dayOfWeek: DayOfWeek

  # Checks for equality with the object’s `federalDirection` field.
  federalDirection: FhwaDirectionOfTravelCode

  # Checks for equality with the object’s `laneCode` field.
  laneCode: Int

  # Checks for equality with the object’s `lanesInDirection` field.
  lanesInDirection: Int

  # Checks for equality with the object’s `collectionInterval` field.
  collectionInterval: Int

  # Checks for equality with the object’s `interval11` field.
  interval11: Int

  # Checks for equality with the object’s `interval12` field.
  interval12: Int

  # Checks for equality with the object’s `interval13` field.
  interval13: Int

  # Checks for equality with the object’s `interval14` field.
  interval14: Int

  # Checks for equality with the object’s `interval21` field.
  interval21: Int

  # Checks for equality with the object’s `interval22` field.
  interval22: Int

  # Checks for equality with the object’s `interval23` field.
  interval23: Int

  # Checks for equality with the object’s `interval24` field.
  interval24: Int

  # Checks for equality with the object’s `interval31` field.
  interval31: Int

  # Checks for equality with the object’s `interval32` field.
  interval32: Int

  # Checks for equality with the object’s `interval33` field.
  interval33: Int

  # Checks for equality with the object’s `interval34` field.
  interval34: Int

  # Checks for equality with the object’s `interval41` field.
  interval41: Int

  # Checks for equality with the object’s `interval42` field.
  interval42: Int

  # Checks for equality with the object’s `interval43` field.
  interval43: Int

  # Checks for equality with the object’s `interval44` field.
  interval44: Int

  # Checks for equality with the object’s `interval51` field.
  interval51: Int

  # Checks for equality with the object’s `interval52` field.
  interval52: Int

  # Checks for equality with the object’s `interval53` field.
  interval53: Int

  # Checks for equality with the object’s `interval54` field.
  interval54: Int

  # Checks for equality with the object’s `interval61` field.
  interval61: Int

  # Checks for equality with the object’s `interval62` field.
  interval62: Int

  # Checks for equality with the object’s `interval63` field.
  interval63: Int

  # Checks for equality with the object’s `interval64` field.
  interval64: Int

  # Checks for equality with the object’s `interval71` field.
  interval71: Int

  # Checks for equality with the object’s `interval72` field.
  interval72: Int

  # Checks for equality with the object’s `interval73` field.
  interval73: Int

  # Checks for equality with the object’s `interval74` field.
  interval74: Int

  # Checks for equality with the object’s `interval81` field.
  interval81: Int

  # Checks for equality with the object’s `interval82` field.
  interval82: Int

  # Checks for equality with the object’s `interval83` field.
  interval83: Int

  # Checks for equality with the object’s `interval84` field.
  interval84: Int

  # Checks for equality with the object’s `interval91` field.
  interval91: Int

  # Checks for equality with the object’s `interval92` field.
  interval92: Int

  # Checks for equality with the object’s `interval93` field.
  interval93: Int

  # Checks for equality with the object’s `interval94` field.
  interval94: Int

  # Checks for equality with the object’s `interval101` field.
  interval101: Int

  # Checks for equality with the object’s `interval102` field.
  interval102: Int

  # Checks for equality with the object’s `interval103` field.
  interval103: Int

  # Checks for equality with the object’s `interval104` field.
  interval104: Int

  # Checks for equality with the object’s `interval111` field.
  interval111: Int

  # Checks for equality with the object’s `interval112` field.
  interval112: Int

  # Checks for equality with the object’s `interval113` field.
  interval113: Int

  # Checks for equality with the object’s `interval114` field.
  interval114: Int

  # Checks for equality with the object’s `interval121` field.
  interval121: Int

  # Checks for equality with the object’s `interval122` field.
  interval122: Int

  # Checks for equality with the object’s `interval123` field.
  interval123: Int

  # Checks for equality with the object’s `interval124` field.
  interval124: Int

  # Checks for equality with the object’s `interval131` field.
  interval131: Int

  # Checks for equality with the object’s `interval132` field.
  interval132: Int

  # Checks for equality with the object’s `interval133` field.
  interval133: Int

  # Checks for equality with the object’s `interval134` field.
  interval134: Int

  # Checks for equality with the object’s `interval141` field.
  interval141: Int

  # Checks for equality with the object’s `interval142` field.
  interval142: Int

  # Checks for equality with the object’s `interval143` field.
  interval143: Int

  # Checks for equality with the object’s `interval144` field.
  interval144: Int

  # Checks for equality with the object’s `interval151` field.
  interval151: Int

  # Checks for equality with the object’s `interval152` field.
  interval152: Int

  # Checks for equality with the object’s `interval153` field.
  interval153: Int

  # Checks for equality with the object’s `interval154` field.
  interval154: Int

  # Checks for equality with the object’s `interval161` field.
  interval161: Int

  # Checks for equality with the object’s `interval162` field.
  interval162: Int

  # Checks for equality with the object’s `interval163` field.
  interval163: Int

  # Checks for equality with the object’s `interval164` field.
  interval164: Int

  # Checks for equality with the object’s `interval171` field.
  interval171: Int

  # Checks for equality with the object’s `interval172` field.
  interval172: Int

  # Checks for equality with the object’s `interval173` field.
  interval173: Int

  # Checks for equality with the object’s `interval174` field.
  interval174: Int

  # Checks for equality with the object’s `interval181` field.
  interval181: Int

  # Checks for equality with the object’s `interval182` field.
  interval182: Int

  # Checks for equality with the object’s `interval183` field.
  interval183: Int

  # Checks for equality with the object’s `interval184` field.
  interval184: Int

  # Checks for equality with the object’s `interval191` field.
  interval191: Int

  # Checks for equality with the object’s `interval192` field.
  interval192: Int

  # Checks for equality with the object’s `interval193` field.
  interval193: Int

  # Checks for equality with the object’s `interval194` field.
  interval194: Int

  # Checks for equality with the object’s `interval201` field.
  interval201: Int

  # Checks for equality with the object’s `interval202` field.
  interval202: Int

  # Checks for equality with the object’s `interval203` field.
  interval203: Int

  # Checks for equality with the object’s `interval204` field.
  interval204: Int

  # Checks for equality with the object’s `interval211` field.
  interval211: Int

  # Checks for equality with the object’s `interval212` field.
  interval212: Int

  # Checks for equality with the object’s `interval213` field.
  interval213: Int

  # Checks for equality with the object’s `interval214` field.
  interval214: Int

  # Checks for equality with the object’s `interval221` field.
  interval221: Int

  # Checks for equality with the object’s `interval222` field.
  interval222: Int

  # Checks for equality with the object’s `interval223` field.
  interval223: Int

  # Checks for equality with the object’s `interval224` field.
  interval224: Int

  # Checks for equality with the object’s `interval231` field.
  interval231: Int

  # Checks for equality with the object’s `interval232` field.
  interval232: Int

  # Checks for equality with the object’s `interval233` field.
  interval233: Int

  # Checks for equality with the object’s `interval234` field.
  interval234: Int

  # Checks for equality with the object’s `interval241` field.
  interval241: Int

  # Checks for equality with the object’s `interval242` field.
  interval242: Int

  # Checks for equality with the object’s `interval243` field.
  interval243: Int

  # Checks for equality with the object’s `interval244` field.
  interval244: Int

  # Checks for equality with the object’s `total` field.
  total: Int

  # Checks for equality with the object’s `flagField` field.
  flagField: String

  # Checks for equality with the object’s `batchId` field.
  batchId: String
}

# A connection to a list of `ShortCountVolume` values.
type ShortCountVolumesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ShortCountVolume` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the `ShortCountVolume` and cursor to aid in pagination.
  edges: [ShortCountVolumesEdge]

  # A list of `ShortCountVolume` objects.
  nodes: [ShortCountVolume!]
}

# A `ShortCountVolume` edge in the connection.
type ShortCountVolumesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ShortCountVolume` at the end of the edge.
  node: ShortCountVolume!
}

# Methods to use when ordering `ShortCountVolume`.
enum ShortCountVolumesOrderBy {
  NATURAL
  RC_STATION_ASC
  RC_STATION_DESC
  COUNT_ID_ASC
  COUNT_ID_DESC
  RG_ASC
  RG_DESC
  REGION_CODE_ASC
  REGION_CODE_DESC
  COUNTY_CODE_ASC
  COUNTY_CODE_DESC
  STAT_ASC
  STAT_DESC
  RCSTA_ASC
  RCSTA_DESC
  FUNCTIONAL_CLASS_ASC
  FUNCTIONAL_CLASS_DESC
  FACTOR_GROUP_ASC
  FACTOR_GROUP_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  SPECIFIC_RECORDER_PLACEMENT_ASC
  SPECIFIC_RECORDER_PLACEMENT_DESC
  CHANNEL_NOTES_ASC
  CHANNEL_NOTES_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  VEHICLE_AXLE_CODE_ASC
  VEHICLE_AXLE_CODE_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  DAY_ASC
  DAY_DESC
  DAY_OF_WEEK_ASC
  DAY_OF_WEEK_DESC
  FEDERAL_DIRECTION_ASC
  FEDERAL_DIRECTION_DESC
  LANE_CODE_ASC
  LANE_CODE_DESC
  LANES_IN_DIRECTION_ASC
  LANES_IN_DIRECTION_DESC
  COLLECTION_INTERVAL_ASC
  COLLECTION_INTERVAL_DESC
  INTERVAL_1_1_ASC
  INTERVAL_1_1_DESC
  INTERVAL_1_2_ASC
  INTERVAL_1_2_DESC
  INTERVAL_1_3_ASC
  INTERVAL_1_3_DESC
  INTERVAL_1_4_ASC
  INTERVAL_1_4_DESC
  INTERVAL_2_1_ASC
  INTERVAL_2_1_DESC
  INTERVAL_2_2_ASC
  INTERVAL_2_2_DESC
  INTERVAL_2_3_ASC
  INTERVAL_2_3_DESC
  INTERVAL_2_4_ASC
  INTERVAL_2_4_DESC
  INTERVAL_3_1_ASC
  INTERVAL_3_1_DESC
  INTERVAL_3_2_ASC
  INTERVAL_3_2_DESC
  INTERVAL_3_3_ASC
  INTERVAL_3_3_DESC
  INTERVAL_3_4_ASC
  INTERVAL_3_4_DESC
  INTERVAL_4_1_ASC
  INTERVAL_4_1_DESC
  INTERVAL_4_2_ASC
  INTERVAL_4_2_DESC
  INTERVAL_4_3_ASC
  INTERVAL_4_3_DESC
  INTERVAL_4_4_ASC
  INTERVAL_4_4_DESC
  INTERVAL_5_1_ASC
  INTERVAL_5_1_DESC
  INTERVAL_5_2_ASC
  INTERVAL_5_2_DESC
  INTERVAL_5_3_ASC
  INTERVAL_5_3_DESC
  INTERVAL_5_4_ASC
  INTERVAL_5_4_DESC
  INTERVAL_6_1_ASC
  INTERVAL_6_1_DESC
  INTERVAL_6_2_ASC
  INTERVAL_6_2_DESC
  INTERVAL_6_3_ASC
  INTERVAL_6_3_DESC
  INTERVAL_6_4_ASC
  INTERVAL_6_4_DESC
  INTERVAL_7_1_ASC
  INTERVAL_7_1_DESC
  INTERVAL_7_2_ASC
  INTERVAL_7_2_DESC
  INTERVAL_7_3_ASC
  INTERVAL_7_3_DESC
  INTERVAL_7_4_ASC
  INTERVAL_7_4_DESC
  INTERVAL_8_1_ASC
  INTERVAL_8_1_DESC
  INTERVAL_8_2_ASC
  INTERVAL_8_2_DESC
  INTERVAL_8_3_ASC
  INTERVAL_8_3_DESC
  INTERVAL_8_4_ASC
  INTERVAL_8_4_DESC
  INTERVAL_9_1_ASC
  INTERVAL_9_1_DESC
  INTERVAL_9_2_ASC
  INTERVAL_9_2_DESC
  INTERVAL_9_3_ASC
  INTERVAL_9_3_DESC
  INTERVAL_9_4_ASC
  INTERVAL_9_4_DESC
  INTERVAL_10_1_ASC
  INTERVAL_10_1_DESC
  INTERVAL_10_2_ASC
  INTERVAL_10_2_DESC
  INTERVAL_10_3_ASC
  INTERVAL_10_3_DESC
  INTERVAL_10_4_ASC
  INTERVAL_10_4_DESC
  INTERVAL_11_1_ASC
  INTERVAL_11_1_DESC
  INTERVAL_11_2_ASC
  INTERVAL_11_2_DESC
  INTERVAL_11_3_ASC
  INTERVAL_11_3_DESC
  INTERVAL_11_4_ASC
  INTERVAL_11_4_DESC
  INTERVAL_12_1_ASC
  INTERVAL_12_1_DESC
  INTERVAL_12_2_ASC
  INTERVAL_12_2_DESC
  INTERVAL_12_3_ASC
  INTERVAL_12_3_DESC
  INTERVAL_12_4_ASC
  INTERVAL_12_4_DESC
  INTERVAL_13_1_ASC
  INTERVAL_13_1_DESC
  INTERVAL_13_2_ASC
  INTERVAL_13_2_DESC
  INTERVAL_13_3_ASC
  INTERVAL_13_3_DESC
  INTERVAL_13_4_ASC
  INTERVAL_13_4_DESC
  INTERVAL_14_1_ASC
  INTERVAL_14_1_DESC
  INTERVAL_14_2_ASC
  INTERVAL_14_2_DESC
  INTERVAL_14_3_ASC
  INTERVAL_14_3_DESC
  INTERVAL_14_4_ASC
  INTERVAL_14_4_DESC
  INTERVAL_15_1_ASC
  INTERVAL_15_1_DESC
  INTERVAL_15_2_ASC
  INTERVAL_15_2_DESC
  INTERVAL_15_3_ASC
  INTERVAL_15_3_DESC
  INTERVAL_15_4_ASC
  INTERVAL_15_4_DESC
  INTERVAL_16_1_ASC
  INTERVAL_16_1_DESC
  INTERVAL_16_2_ASC
  INTERVAL_16_2_DESC
  INTERVAL_16_3_ASC
  INTERVAL_16_3_DESC
  INTERVAL_16_4_ASC
  INTERVAL_16_4_DESC
  INTERVAL_17_1_ASC
  INTERVAL_17_1_DESC
  INTERVAL_17_2_ASC
  INTERVAL_17_2_DESC
  INTERVAL_17_3_ASC
  INTERVAL_17_3_DESC
  INTERVAL_17_4_ASC
  INTERVAL_17_4_DESC
  INTERVAL_18_1_ASC
  INTERVAL_18_1_DESC
  INTERVAL_18_2_ASC
  INTERVAL_18_2_DESC
  INTERVAL_18_3_ASC
  INTERVAL_18_3_DESC
  INTERVAL_18_4_ASC
  INTERVAL_18_4_DESC
  INTERVAL_19_1_ASC
  INTERVAL_19_1_DESC
  INTERVAL_19_2_ASC
  INTERVAL_19_2_DESC
  INTERVAL_19_3_ASC
  INTERVAL_19_3_DESC
  INTERVAL_19_4_ASC
  INTERVAL_19_4_DESC
  INTERVAL_20_1_ASC
  INTERVAL_20_1_DESC
  INTERVAL_20_2_ASC
  INTERVAL_20_2_DESC
  INTERVAL_20_3_ASC
  INTERVAL_20_3_DESC
  INTERVAL_20_4_ASC
  INTERVAL_20_4_DESC
  INTERVAL_21_1_ASC
  INTERVAL_21_1_DESC
  INTERVAL_21_2_ASC
  INTERVAL_21_2_DESC
  INTERVAL_21_3_ASC
  INTERVAL_21_3_DESC
  INTERVAL_21_4_ASC
  INTERVAL_21_4_DESC
  INTERVAL_22_1_ASC
  INTERVAL_22_1_DESC
  INTERVAL_22_2_ASC
  INTERVAL_22_2_DESC
  INTERVAL_22_3_ASC
  INTERVAL_22_3_DESC
  INTERVAL_22_4_ASC
  INTERVAL_22_4_DESC
  INTERVAL_23_1_ASC
  INTERVAL_23_1_DESC
  INTERVAL_23_2_ASC
  INTERVAL_23_2_DESC
  INTERVAL_23_3_ASC
  INTERVAL_23_3_DESC
  INTERVAL_23_4_ASC
  INTERVAL_23_4_DESC
  INTERVAL_24_1_ASC
  INTERVAL_24_1_DESC
  INTERVAL_24_2_ASC
  INTERVAL_24_2_DESC
  INTERVAL_24_3_ASC
  INTERVAL_24_3_DESC
  INTERVAL_24_4_ASC
  INTERVAL_24_4_DESC
  TOTAL_ASC
  TOTAL_DESC
  FLAG_FIELD_ASC
  FLAG_FIELD_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
}
